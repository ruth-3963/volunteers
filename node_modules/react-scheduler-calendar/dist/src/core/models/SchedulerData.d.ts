import moment, { Moment } from 'moment';
import { Event, Header, Resource, ResourceEvent, Task } from 'src/core/types';
import behaviors from '../utils/behaviors';
export declare class SchedulerData {
    resources: Resource[];
    events: Event[];
    tasks: Task[];
    cellUnit: number;
    resizing: boolean;
    scrollToSpecialMoment: boolean;
    documentWidth: number;
    localeMoment: typeof moment;
    config: any;
    behaviors: typeof behaviors;
    startDate: string;
    endDate: string;
    selectDate: string;
    resourceEvents: ResourceEvent[];
    headers: Header[];
    constructor(date?: string, newConfig?: Record<string, unknown>, newBehaviors?: Record<string, unknown>, localeMoment?: typeof moment);
    setLocaleMoment(localeMoment: typeof moment): void;
    setResources(resources: Resource[]): void;
    getMinuteStepsInHour(): number;
    setEvents(events: Event[]): void;
    setTasks(tasks: Task[]): void;
    setScrollToSpecialMoment(scrollToSpecialMoment: boolean): void;
    prev(): void;
    next(): void;
    setDate(date?: string | moment.Moment): void;
    setSchedulerMaxHeight(newSchedulerMaxHeight: number): void;
    isSchedulerResponsive(): any;
    toggleExpandStatus(slotId: string): void;
    isResourceViewResponsive(): any;
    isContentViewResponsive(): any;
    getSchedulerWidth(): any;
    getResourceTableWidth(): any;
    getContentCellWidth(): any;
    getContentTableWidth(): number;
    getScrollToSpecialMoment(): boolean;
    getSlotById(slotId: string): Resource;
    getTableHeaderHeight(): any;
    getSchedulerContentDesiredHeight(): number;
    getCellMaxEvents(): any;
    getDateLabel(): string;
    addEvent(newEvent: Event): void;
    updateEventStart(event: Event, newStart: string): void;
    updateEventEnd(event: Event, newEnd: string): void;
    moveEvent(event: Event, newSlotId: string, newSlotName: string, newStart: string, newEnd: string): void;
    isEventInTimeWindow(eventStart: Moment, eventEnd: Moment, windowStart: Moment, windowEnd: Moment): boolean;
    removeEvent(event: Event): void;
    removeEventById(eventId: string): void;
    getResourceTableConfigWidth(): any;
    getContentCellConfigWidth(): any;
    _setDocumentWidth(documentWidth: number): void;
    _detachEvent(event: Event): void;
    _attachEvent(event: Event): void;
    _getEventSlotId(event: Event): string;
    _handleRecurringEvents(): void;
    _resolveDate(num: number, date?: string | Moment): void;
    _createHeaders(): void;
    _createInitHeaderEvents(header: Header): {
        time: string;
        nonWorkingTime: boolean;
        start: string;
        end: string;
        count: number;
        addMore: number;
        addMoreIndex: number;
        events: never[];
    };
    _createHeaderItems(headers: Header[]): {
        time: string;
        nonWorkingTime: boolean;
        start: string;
        end: string;
        count: number;
        addMore: number;
        addMoreIndex: number;
        events: never[];
    }[];
    _createInitRenderData(resources: Resource[], headers: Header[]): ResourceEvent[];
    getSpan(startTime: Moment, endTime: Moment, headers: Header[]): number;
    _validateResource(resources: Resource[]): void;
    _validateEvents(events: Event[]): void;
    _validateMinuteStep(minuteStep: number): void;
    _compare(event1: Event, event2: Event): 1 | -1;
    _createResourceEvents(): void;
    startResizing(): void;
    _stopResizing(): void;
    _isResizing(): boolean;
}
