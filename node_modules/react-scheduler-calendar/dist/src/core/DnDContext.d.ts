import React from 'react';
import { DropTargetConnector, DropTargetMonitor } from 'react-dnd';
export default class DnDContext<DecoratedComponentProps = any> {
    private readonly DecoratedComponent;
    private lastHoverCalledTime;
    private lastHoverPosition;
    constructor(DecoratedComponent: React.ComponentType<DecoratedComponentProps>);
    getDropSpec: () => {
        drop: (props: any, monitor: DropTargetMonitor, component: any) => {
            slotId: any;
            slotName: any;
            start: any;
            end: any;
        };
        hover: (props: any, monitor: DropTargetMonitor, component: any) => void;
        canDrop: (props: any, monitor: DropTargetMonitor) => any;
    };
    getDropCollect(connect: DropTargetConnector, monitor: DropTargetMonitor): {
        connectDropTarget: import("react-dnd").DragElementWrapper<any>;
        isOver: boolean;
        isDragging: boolean;
    };
    getDropTarget: () => import("react-dnd").DndComponentClass<React.ComponentType<import("react-dnd").Matching<any, DecoratedComponentProps>>, Pick<import("react-dnd").Matching<any, DecoratedComponentProps>, Exclude<keyof DecoratedComponentProps, Extract<string, keyof DecoratedComponentProps> | Extract<number, keyof DecoratedComponentProps> | Extract<symbol, keyof DecoratedComponentProps>>>>;
}
