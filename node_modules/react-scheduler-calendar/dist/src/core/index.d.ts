import { Moment } from 'moment';
import React, { Component, ReactNode } from 'react';
import { DragElementWrapper, DragSourceOptions } from 'react-dnd';
import { SchedulerData } from 'src/core/models/SchedulerData';
import { ResourceEvent } from 'src/core/types';
import DEFAULT_CONFIG from './constants/config';
import './styles/style.css';
export interface SchedulerProps {
    schedulerData: SchedulerData;
    prevClick: (...args: any[]) => any;
    nextClick: (...args: any[]) => any;
    onTodayClick: (...args: any[]) => any;
    onViewChange: (...args: any[]) => any;
    onSelectDate: (...args: any[]) => any;
    updateEventStart?: (...args: any[]) => any;
    updateEventEnd?: (...args: any[]) => any;
    moveEvent?: (...args: any[]) => any;
    movingEvent?: (...args: any[]) => any;
    leftCustomHeader?: string | ReactNode;
    rightCustomHeader?: string | ReactNode;
    newEvent?: (...args: any[]) => any;
    conflictOccurred?: (...args: any[]) => any;
    eventItemTemplateResolver?: (...args: any[]) => any;
    toggleExpandFunc?: (schedulerData: SchedulerData, slotId: string) => void;
    nonAgendaCellHeaderTemplateResolver?: (...args: any[]) => any;
    eventItemClick?: (...args: any[]) => any;
    renderEvent?: (eventItem: any, connectDragSource: DragElementWrapper<DragSourceOptions>, renderResizer: (fragment: React.ReactElement) => JSX.Element) => any;
    getHoverAreaStyle?: (hoverParams: any) => any;
    showBody?: boolean;
    renderResource?: (resourceEvent: ResourceEvent) => React.ReactElement;
    onScrollEnd: (isVertical: boolean, isHorizontal: boolean) => void;
    onBeginDrag?: (eventItem: any) => void;
    onEventResize?: (eventItem: any) => void;
}
interface SchedulerState {
    documentWidth: number;
    documentHeight: number;
    showBody: boolean;
}
declare class Scheduler extends Component<SchedulerProps, SchedulerState> {
    private schedulerContentRef;
    constructor(props: SchedulerProps);
    static getDerivedStateFromProps(props: SchedulerProps, state: SchedulerState): {
        showBody: boolean | undefined;
    } | null;
    componentDidMount(): void;
    componentDidUpdate(props: SchedulerProps): void;
    onWindowResize: () => void;
    scrollToSpecificTime: () => void;
    handleClickToday: () => void;
    handleClickPrevDate: () => void;
    handleClickNextDate: () => void;
    handleSelectDate: (date: Moment) => void;
    render(): JSX.Element;
}
export declare const DATE_FORMAT = "YYYY-MM-DD";
export declare const DATETIME_FORMAT = "YYYY-MM-DD HH:mm:ss";
export * from './constants/ViewTypes';
export * from './constants/CellUnits';
export * from './constants/SummaryPos';
export * from './models/SchedulerData';
export * from './DnDSource';
export * from './DnDContext';
export * from '../lib';
export { DEFAULT_CONFIG };
export default Scheduler;
