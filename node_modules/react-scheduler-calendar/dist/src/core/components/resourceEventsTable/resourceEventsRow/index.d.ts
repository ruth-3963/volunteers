import React from 'react';
import { DragElementWrapper, DragSourceOptions } from 'react-dnd';
import { SchedulerData } from 'src/core';
export interface ResourceEventsRowProps {
    resourceEvents?: any;
    schedulerData: SchedulerData;
    onHover?: (...args: any[]) => any;
    moveEvent?: (...args: any[]) => any;
    movingEvent?: (...args: any[]) => any;
    conflictOccurred?: (...args: any[]) => any;
    newEvent?: (...args: any[]) => any;
    eventItemClick?: (...args: any[]) => any;
    eventItemTemplateResolver?: (...args: any[]) => any;
    getHoverAreaStyle?: (...args: any[]) => any;
    connectDropTarget?: (...args: any[]) => any;
    updateEventStart?: (...args: any[]) => any;
    updateEventEnd?: (...args: any[]) => any;
    onEventResize?: (...args: any[]) => any;
    isOver?: boolean;
    renderEvent?: (eventItem: any, connectDragSource: DragElementWrapper<DragSourceOptions>, renderResizer: (fragment: any) => JSX.Element) => React.ReactElement;
}
export interface ResourceEventsRowState {
    startX?: number;
    left?: number;
    leftIndex?: number;
    width?: number;
    rightIndex?: number;
    isSelecting?: boolean;
    hover?: any;
}
declare type DragEvent = MouseEvent | TouchEvent;
export declare class ResourceEventsRow extends React.Component<ResourceEventsRowProps, ResourceEventsRowState> {
    private eventContainer;
    constructor(props: Readonly<ResourceEventsRowProps>);
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: ResourceEventsRowProps): void;
    initDrag: (ev: DragEvent) => void;
    doDrag: (ev: DragEvent) => void;
    stopDrag: (ev: DragEvent) => void;
    cancelDrag: (ev: DragEvent) => void;
    eventContainerRef: (element: HTMLDivElement) => void;
    HoverArea: () => JSX.Element | null;
    SelectedArea: () => JSX.Element | null;
    EventList: () => JSX.Element;
    render(): JSX.Element;
}
declare const _default: import("react-dnd").DndComponentClass<React.ComponentType<import("react-dnd").Matching<any, ResourceEventsRowProps>>, Pick<import("react-dnd").Matching<any, ResourceEventsRowProps>, "resourceEvents" | "schedulerData" | "moveEvent" | "newEvent" | "updateEventStart" | "updateEventEnd" | "eventItemClick" | "conflictOccurred" | "eventItemTemplateResolver" | "renderEvent" | "onEventResize" | "movingEvent" | "onHover" | "getHoverAreaStyle" | "connectDropTarget" | "isOver">>;
export default _default;
