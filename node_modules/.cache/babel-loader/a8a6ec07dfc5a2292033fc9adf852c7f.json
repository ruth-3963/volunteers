{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilani\\\\project\\\\volunteers\\\\src\\\\scheduler\\\\calendar.jsx\";\nimport React, { Component } from 'react';\nimport { DayPilot, DayPilotCalendar, DayPilotNavigator } from \"daypilot-pro-react\";\nimport \"./CalendarStyles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  left: {\n    marginRight: \"10px\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      config: {\n        viewType: \"Week\",\n        durationBarVisible: false,\n        timeRangeSelectedHandling: \"Enabled\",\n        onTimeRangeSelected: args => {\n          let dp = this.calendar;\n          DayPilot.Modal.prompt(\"Create a new event:\", \"Event 1\").then(function (modal) {\n            dp.clearSelection();\n\n            if (!modal.result) {\n              return;\n            }\n\n            dp.events.add(new DayPilot.Event({\n              start: args.start,\n              end: args.end,\n              id: DayPilot.guid(),\n              text: modal.result\n            }));\n          });\n        },\n        eventDeleteHandling: \"Update\",\n        onEventClick: args => {\n          let dp = this.calendar;\n          DayPilot.Modal.prompt(\"Update event text:\", args.e.text()).then(function (modal) {\n            if (!modal.result) {\n              return;\n            }\n\n            args.e.data.text = modal.result;\n            dp.events.update(args.e);\n          });\n        },\n        onBeforeCellRender: args => {\n          if (args.cell.start.getDay() === 14 && args.cell.start.getHours() > 9) {\n            args.cell.html = \"<h6>ejhik</h6>\";\n          }\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    // load event data\n    this.setState(prevState => ({\n      startDate: \"2021-09-15\",\n      config: { ...prevState.food,\n        events: [{\n          id: 1,\n          text: \"Event 1\",\n          start: \"2021-09-13T10:30:00\",\n          end: \"2021-09-13T13:00:00\"\n        }, {\n          id: 2,\n          text: \"Event 2\",\n          start: \"2021-09-14T09:30:00\",\n          end: \"2021-09-14T11:30:00\",\n          backColor: \"#38761d\"\n        }, {\n          id: 2,\n          text: \"Event 3\",\n          start: \"2021-09-14T12:00:00\",\n          end: \"2021-09-14T15:00:00\",\n          backColor: \"#cc4125\"\n        }]\n      }\n    }));\n  }\n\n  render() {\n    var { ...config\n    } = this.state.config;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.wrap,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.main,\n        children: /*#__PURE__*/_jsxDEV(DayPilotCalendar, { ...config,\n          ref: component => {\n            this.calendar = component && component.control;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          console.log(\"calender\", this.calendar ? this.calendar.elements.events : \"\");\n        },\n        children: \"calender\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["C:/Users/ilani/project/volunteers/src/scheduler/calendar.jsx"],"names":["React","Component","DayPilot","DayPilotCalendar","DayPilotNavigator","styles","wrap","display","left","marginRight","main","flexGrow","Calendar","constructor","props","state","config","viewType","durationBarVisible","timeRangeSelectedHandling","onTimeRangeSelected","args","dp","calendar","Modal","prompt","then","modal","clearSelection","result","events","add","Event","start","end","id","guid","text","eventDeleteHandling","onEventClick","e","data","update","onBeforeCellRender","cell","getDay","getHours","html","componentDidMount","setState","prevState","startDate","food","backColor","render","component","control","console","log","elements"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DayPilot, DayPilotCalendar, DayPilotNavigator } from \"daypilot-pro-react\";\r\nimport \"./CalendarStyles.css\";\r\n\r\nconst styles = {\r\n  wrap: {\r\n    display: \"flex\"\r\n  },\r\n  left: {\r\n    marginRight: \"10px\"\r\n  },\r\n  main: {\r\n    flexGrow: \"1\"\r\n  }\r\n};\r\n\r\nclass Calendar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      config: {\r\n        viewType: \"Week\",\r\n        durationBarVisible: false,\r\n        timeRangeSelectedHandling: \"Enabled\",\r\n        onTimeRangeSelected: args => {\r\n          let dp = this.calendar;\r\n          DayPilot.Modal.prompt(\"Create a new event:\", \"Event 1\").then(function (modal) {\r\n            dp.clearSelection();\r\n            if (!modal.result) { return; }\r\n            dp.events.add(new DayPilot.Event({\r\n              start: args.start,\r\n              end: args.end,\r\n              id: DayPilot.guid(),\r\n              text: modal.result\r\n            }));\r\n          });\r\n        },\r\n        eventDeleteHandling: \"Update\",\r\n        onEventClick: args => {\r\n          let dp = this.calendar;\r\n          DayPilot.Modal.prompt(\"Update event text:\", args.e.text()).then(function (modal) {\r\n            if (!modal.result) { return; }\r\n            args.e.data.text = modal.result;\r\n            dp.events.update(args.e);\r\n          });\r\n        },\r\n        onBeforeCellRender: args => {\r\n          if (args.cell.start.getDay() === 14 && args.cell.start.getHours() > 9) {\r\n            args.cell.html = \"<h6>ejhik</h6>\"\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n   \r\n    // load event data\r\n    this.setState(prevState => ({\r\n      startDate: \"2021-09-15\",\r\n      config: {\r\n        ...prevState.food,\r\n        events: [\r\n          {\r\n            id: 1,\r\n            text: \"Event 1\",\r\n            start: \"2021-09-13T10:30:00\",\r\n            end: \"2021-09-13T13:00:00\"\r\n          },\r\n          {\r\n            id: 2,\r\n            text: \"Event 2\",\r\n            start: \"2021-09-14T09:30:00\",\r\n            end: \"2021-09-14T11:30:00\",\r\n            backColor: \"#38761d\"\r\n          },\r\n          {\r\n            id: 2,\r\n            text: \"Event 3\",\r\n            start: \"2021-09-14T12:00:00\",\r\n            end: \"2021-09-14T15:00:00\",\r\n            backColor: \"#cc4125\"\r\n          },\r\n        ]\r\n      }\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    var { ...config } = this.state.config;\r\n    return (\r\n      <div style={styles.wrap}>\r\n        {/* <div style={styles.left}>\r\n          <DayPilotNavigator\r\n            selectMode={\"week\"}\r\n            showMonths={3}\r\n            skipMonths={3}\r\n            onTimeRangeSelected={ args => {\r\n              this.setState({\r\n                startDate: args.day\r\n              });\r\n            }}\r\n          />\r\n        </div> */}\r\n        <div style={styles.main}>\r\n          <DayPilotCalendar\r\n            {...config}\r\n            ref={component => {\r\n              this.calendar = component && component.control;\r\n            }}\r\n\r\n          />\r\n        </div>\r\n        <button onClick={() => { console.log(\"calender\", this.calendar ? this.calendar.elements.events : \"\") }}>calender</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}