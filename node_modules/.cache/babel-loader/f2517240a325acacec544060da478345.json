{"ast":null,"code":"import { freqIsDailyOrGreater } from '../types';\nimport dateutil from '../dateutil';\nimport Iterinfo from '../iterinfo/index';\nimport RRule from '../rrule';\nimport { buildTimeset } from '../parseoptions';\nimport { notEmpty, includes, isPresent } from '../helpers';\nimport { DateWithZone } from '../datewithzone';\nimport { buildPoslist } from './poslist';\nimport { DateTime } from '../datetime';\nexport function iter(iterResult, options) {\n  var dtstart = options.dtstart,\n      freq = options.freq,\n      interval = options.interval,\n      until = options.until,\n      bysetpos = options.bysetpos;\n  var count = options.count;\n\n  if (count === 0 || interval === 0) {\n    return emitResult(iterResult);\n  }\n\n  var counterDate = DateTime.fromDate(dtstart);\n  var ii = new Iterinfo(options);\n  ii.rebuild(counterDate.year, counterDate.month);\n  var timeset = makeTimeset(ii, counterDate, options);\n\n  while (true) {\n    var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day),\n        dayset = _a[0],\n        start = _a[1],\n        end = _a[2];\n\n    var filtered = removeFilteredDays(dayset, start, end, ii, options);\n\n    if (notEmpty(bysetpos)) {\n      var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);\n\n      for (var j = 0; j < poslist.length; j++) {\n        var res = poslist[j];\n\n        if (until && res > until) {\n          return emitResult(iterResult);\n        }\n\n        if (res >= dtstart) {\n          var rezonedDate = rezoneIfNeeded(res, options);\n\n          if (!iterResult.accept(rezonedDate)) {\n            return emitResult(iterResult);\n          }\n\n          if (count) {\n            --count;\n\n            if (!count) {\n              return emitResult(iterResult);\n            }\n          }\n        }\n      }\n    } else {\n      for (var j = start; j < end; j++) {\n        var currentDay = dayset[j];\n\n        if (!isPresent(currentDay)) {\n          continue;\n        }\n\n        var date = dateutil.fromOrdinal(ii.yearordinal + currentDay);\n\n        for (var k = 0; k < timeset.length; k++) {\n          var time = timeset[k];\n          var res = dateutil.combine(date, time);\n\n          if (until && res > until) {\n            return emitResult(iterResult);\n          }\n\n          if (res >= dtstart) {\n            var rezonedDate = rezoneIfNeeded(res, options);\n\n            if (!iterResult.accept(rezonedDate)) {\n              return emitResult(iterResult);\n            }\n\n            if (count) {\n              --count;\n\n              if (!count) {\n                return emitResult(iterResult);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (options.interval === 0) {\n      return emitResult(iterResult);\n    } // Handle frequency and interval\n\n\n    counterDate.add(options, filtered);\n\n    if (counterDate.year > dateutil.MAXYEAR) {\n      return emitResult(iterResult);\n    }\n\n    if (!freqIsDailyOrGreater(freq)) {\n      timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);\n    }\n\n    ii.rebuild(counterDate.year, counterDate.month);\n  }\n}\n\nfunction isFiltered(ii, currentDay, options) {\n  var bymonth = options.bymonth,\n      byweekno = options.byweekno,\n      byweekday = options.byweekday,\n      byeaster = options.byeaster,\n      bymonthday = options.bymonthday,\n      bynmonthday = options.bynmonthday,\n      byyearday = options.byyearday;\n  return notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay]) || notEmpty(byweekno) && !ii.wnomask[currentDay] || notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay]) || notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay] || byeaster !== null && !includes(ii.eastermask, currentDay) || (notEmpty(bymonthday) || notEmpty(bynmonthday)) && !includes(bymonthday, ii.mdaymask[currentDay]) && !includes(bynmonthday, ii.nmdaymask[currentDay]) || notEmpty(byyearday) && (currentDay < ii.yearlen && !includes(byyearday, currentDay + 1) && !includes(byyearday, -ii.yearlen + currentDay) || currentDay >= ii.yearlen && !includes(byyearday, currentDay + 1 - ii.yearlen) && !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen));\n}\n\nfunction rezoneIfNeeded(date, options) {\n  return new DateWithZone(date, options.tzid).rezonedDate();\n}\n\nfunction emitResult(iterResult) {\n  return iterResult.getValue();\n}\n\nfunction removeFilteredDays(dayset, start, end, ii, options) {\n  var filtered = false;\n\n  for (var dayCounter = start; dayCounter < end; dayCounter++) {\n    var currentDay = dayset[dayCounter];\n    filtered = isFiltered(ii, currentDay, options);\n    if (filtered) dayset[currentDay] = null;\n  }\n\n  return filtered;\n}\n\nfunction makeTimeset(ii, counterDate, options) {\n  var freq = options.freq,\n      byhour = options.byhour,\n      byminute = options.byminute,\n      bysecond = options.bysecond;\n\n  if (freqIsDailyOrGreater(freq)) {\n    return buildTimeset(options);\n  }\n\n  if (freq >= RRule.HOURLY && notEmpty(byhour) && !includes(byhour, counterDate.hour) || freq >= RRule.MINUTELY && notEmpty(byminute) && !includes(byminute, counterDate.minute) || freq >= RRule.SECONDLY && notEmpty(bysecond) && !includes(bysecond, counterDate.second)) {\n    return [];\n  }\n\n  return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);\n}","map":{"version":3,"sources":["../../../../src/iter/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { freqIsDailyOrGreater } from '../types';\r\nimport dateutil from '../dateutil';\r\nimport Iterinfo from '../iterinfo/index';\r\nimport RRule from '../rrule';\r\nimport { buildTimeset } from '../parseoptions';\r\nimport { notEmpty, includes, isPresent } from '../helpers';\r\nimport { DateWithZone } from '../datewithzone';\r\nimport { buildPoslist } from './poslist';\r\nimport { DateTime } from '../datetime';\r\nexport function iter(iterResult, options) {\r\n    var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;\r\n    var count = options.count;\r\n    if (count === 0 || interval === 0) {\r\n        return emitResult(iterResult);\r\n    }\r\n    var counterDate = DateTime.fromDate(dtstart);\r\n    var ii = new Iterinfo(options);\r\n    ii.rebuild(counterDate.year, counterDate.month);\r\n    var timeset = makeTimeset(ii, counterDate, options);\r\n    while (true) {\r\n        var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];\r\n        var filtered = removeFilteredDays(dayset, start, end, ii, options);\r\n        if (notEmpty(bysetpos)) {\r\n            var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);\r\n            for (var j = 0; j < poslist.length; j++) {\r\n                var res = poslist[j];\r\n                if (until && res > until) {\r\n                    return emitResult(iterResult);\r\n                }\r\n                if (res >= dtstart) {\r\n                    var rezonedDate = rezoneIfNeeded(res, options);\r\n                    if (!iterResult.accept(rezonedDate)) {\r\n                        return emitResult(iterResult);\r\n                    }\r\n                    if (count) {\r\n                        --count;\r\n                        if (!count) {\r\n                            return emitResult(iterResult);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var j = start; j < end; j++) {\r\n                var currentDay = dayset[j];\r\n                if (!isPresent(currentDay)) {\r\n                    continue;\r\n                }\r\n                var date = dateutil.fromOrdinal(ii.yearordinal + currentDay);\r\n                for (var k = 0; k < timeset.length; k++) {\r\n                    var time = timeset[k];\r\n                    var res = dateutil.combine(date, time);\r\n                    if (until && res > until) {\r\n                        return emitResult(iterResult);\r\n                    }\r\n                    if (res >= dtstart) {\r\n                        var rezonedDate = rezoneIfNeeded(res, options);\r\n                        if (!iterResult.accept(rezonedDate)) {\r\n                            return emitResult(iterResult);\r\n                        }\r\n                        if (count) {\r\n                            --count;\r\n                            if (!count) {\r\n                                return emitResult(iterResult);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (options.interval === 0) {\r\n            return emitResult(iterResult);\r\n        }\r\n        // Handle frequency and interval\r\n        counterDate.add(options, filtered);\r\n        if (counterDate.year > dateutil.MAXYEAR) {\r\n            return emitResult(iterResult);\r\n        }\r\n        if (!freqIsDailyOrGreater(freq)) {\r\n            timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);\r\n        }\r\n        ii.rebuild(counterDate.year, counterDate.month);\r\n    }\r\n}\r\nfunction isFiltered(ii, currentDay, options) {\r\n    var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;\r\n    return ((notEmpty(bymonth) && !includes(bymonth, ii.mmask[currentDay])) ||\r\n        (notEmpty(byweekno) && !ii.wnomask[currentDay]) ||\r\n        (notEmpty(byweekday) && !includes(byweekday, ii.wdaymask[currentDay])) ||\r\n        (notEmpty(ii.nwdaymask) && !ii.nwdaymask[currentDay]) ||\r\n        (byeaster !== null && !includes(ii.eastermask, currentDay)) ||\r\n        ((notEmpty(bymonthday) || notEmpty(bynmonthday)) &&\r\n            !includes(bymonthday, ii.mdaymask[currentDay]) &&\r\n            !includes(bynmonthday, ii.nmdaymask[currentDay])) ||\r\n        (notEmpty(byyearday) &&\r\n            ((currentDay < ii.yearlen &&\r\n                !includes(byyearday, currentDay + 1) &&\r\n                !includes(byyearday, -ii.yearlen + currentDay)) ||\r\n                (currentDay >= ii.yearlen &&\r\n                    !includes(byyearday, currentDay + 1 - ii.yearlen) &&\r\n                    !includes(byyearday, -ii.nextyearlen + currentDay - ii.yearlen)))));\r\n}\r\nfunction rezoneIfNeeded(date, options) {\r\n    return new DateWithZone(date, options.tzid).rezonedDate();\r\n}\r\nfunction emitResult(iterResult) {\r\n    return iterResult.getValue();\r\n}\r\nfunction removeFilteredDays(dayset, start, end, ii, options) {\r\n    var filtered = false;\r\n    for (var dayCounter = start; dayCounter < end; dayCounter++) {\r\n        var currentDay = dayset[dayCounter];\r\n        filtered = isFiltered(ii, currentDay, options);\r\n        if (filtered)\r\n            dayset[currentDay] = null;\r\n    }\r\n    return filtered;\r\n}\r\nfunction makeTimeset(ii, counterDate, options) {\r\n    var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;\r\n    if (freqIsDailyOrGreater(freq)) {\r\n        return buildTimeset(options);\r\n    }\r\n    if ((freq >= RRule.HOURLY &&\r\n        notEmpty(byhour) &&\r\n        !includes(byhour, counterDate.hour)) ||\r\n        (freq >= RRule.MINUTELY &&\r\n            notEmpty(byminute) &&\r\n            !includes(byminute, counterDate.minute)) ||\r\n        (freq >= RRule.SECONDLY &&\r\n            notEmpty(bysecond) &&\r\n            !includes(bysecond, counterDate.second))) {\r\n        return [];\r\n    }\r\n    return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);\r\n}\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}