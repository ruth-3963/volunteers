{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilani\\\\project\\\\volunteers\\\\src\\\\scheduler\\\\calendarFunc.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { DayPilot, DayPilotCalendar, DayPilotNavigator } from \"daypilot-pro-react\";\nimport { useLocation } from 'react-router-dom';\nimport \"./CalendarStyles.css\";\nimport axios from \"axios\";\nimport serverURL from \"../serverURL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  wrap: {\n    display: \"flex\"\n  },\n  left: {\n    marginRight: \"10px\"\n  },\n  main: {\n    flexGrow: \"1\"\n  }\n};\nconst cells = [{\n  start: \"2021-09-17T10:30:00\",\n  end: \"2021-09-17T13:00:00\"\n}, {\n  start: \"2021-09-15T10:30:00\",\n  end: \"2021-09-15T13:00:00\"\n}, {\n  start: \"2021-09-16T10:30:00\",\n  end: \"2021-09-16T13:00:00\"\n}];\n\nconst Calendar = props => {\n  _s();\n\n  const [isEdit, setIsEdit] = useState(false);\n  const location = useLocation();\n  const [times, setTimes] = useState(props.events);\n  const [group, setGroup] = useState(location.state.group);\n  useEffect(() => {\n    if (location.state && location.state.edit) setIsEdit(true);\n  }, []);\n  const [style, setStyle] = useState({\n    viewType: \"Week\",\n    durationBarVisible: false,\n    timeRangeSelectedHandling: \"Enabled\",\n    onTimeRangeSelected: args => {\n      let dp = calendar.current;\n\n      if (location.state.edit) {\n        dp.clearSelection();\n        dp.events.add(new DayPilot.Event({\n          start: args.start,\n          end: args.end,\n          id: DayPilot.guid(),\n          text: args.start.getHours() + \":\" + (args.start.getMinutes() ? args.start.getMinutes() : \"00\") + \" - \" + args.end.getHours() + \":\" + (args.end.getMinutes() ? args.end.getMinutes() : \"00\")\n        }));\n      } else {\n        DayPilot.Modal.prompt(\"Create a new event:\", \"Event 1\").then(function (modal) {\n          dp.clearSelection();\n\n          if (!modal.result) {\n            return;\n          }\n\n          dp.events.add(new DayPilot.Event({\n            start: args.start,\n            end: args.end,\n            id: DayPilot.guid(),\n            text: modal.result\n          }));\n        });\n      }\n    },\n    startDate: '2021-09-15',\n    events: [...props.events],\n    // events: [{\n    //     id: 1,\n    //     text: \"Event 1\",\n    //     start: \"2021-09-13T10:30:00\",\n    //     end: \"2021-09-13T13:00:00\",\n    //     moveDisabled: true,\n    //     clickDisabled: true,\n    //     resizeDisabled: true,\n    //     deleteDisabled: true,\n    // },\n    // {\n    //     id: 2,\n    //     text: \"Event 2\",\n    //     start: \"2021-09-14T09:30:00\",\n    //     end: \"2021-09-14T11:30:00\",\n    //     backColor: \"#38761d\"\n    // },\n    // {\n    //     id: 2,\n    //     text: \"Event 3\",\n    //     start: \"2021-09-14T12:00:00\",\n    //     end: \"2021-09-14T15:00:00\",\n    //     backColor: \"#cc4125\"\n    // }],\n    eventDeleteHandling: \"Update\",\n    onEventClick: args => {\n      let dp = calendar.current;\n      DayPilot.Modal.prompt(\"Update event text:\", args.e.text()).then(function (modal) {\n        if (!modal.result) {\n          return;\n        }\n\n        console.log(args);\n        args.e.data.text = modal.result;\n        dp.events.update(args.e);\n      });\n    },\n    onBeforeCellRender: args => {// if (cells.filter(c => args.cell.start >= c.start && args.cell.end <= c.end).length > 0) {\n      //     args.cell.backColor = \"#a0e1ec\";\n      // }\n      // else {\n      //     args.cell.disabled = true;\n      // }\n    },\n    onEventEdited: args => {\n      console.log(\"event edit\", args);\n    }\n  });\n  useEffect(() => {\n    console.log(props.events);\n    setTimes(props.events); // setStyle({...style, \n    //     events:props.events.slice() \n    // });\n  }, [props.events]); //const [events, setEvents] = useState([])\n  //const [startDate, setStartDate] = useState(\"2021-09-15\");\n\n  const calendar = useRef(null); // useEffect(() => {\n  //setEvents();\n  // setStartDate('2021-09-10')\n  // }, [])\n\n  const Paint = () => {\n    const start = \"2021-09-15T12:00:00\";\n    const end = \"2021-09-15T15:00:00\"; //  calendar.current.Row.cells.forRange(start, end).backColor = \"red\";\n  };\n\n  const sendEventsToDb = async () => {\n    const result = await axios.put(\"\" + serverURL + \"api/Event\", {\n      events: calendar.current.events.list,\n      group: group\n    });\n    console.log(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.wrap,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.left,\n      children: /*#__PURE__*/_jsxDEV(DayPilotNavigator, {\n        selectMode: \"week\",\n        showMonths: 3,\n        skipMonths: 3 //onTimeRangeSelected={args => {\n        //    setStartDate(args.day)\n        //}}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.main,\n      children: /*#__PURE__*/_jsxDEV(DayPilotCalendar, { ...style,\n        // {...events}\n        ref: component => {\n          calendar.current = component && component.control;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => Paint(),\n      children: \"Paint cells\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendEventsToDb(),\n      children: \"calender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"bY7gwV17MsKKpf+u1RuGgb45I90=\", false, function () {\n  return [useLocation];\n});\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilani/project/volunteers/src/scheduler/calendarFunc.jsx"],"names":["React","useEffect","useRef","useState","DayPilot","DayPilotCalendar","DayPilotNavigator","useLocation","axios","serverURL","styles","wrap","display","left","marginRight","main","flexGrow","cells","start","end","Calendar","props","isEdit","setIsEdit","location","times","setTimes","events","group","setGroup","state","edit","style","setStyle","viewType","durationBarVisible","timeRangeSelectedHandling","onTimeRangeSelected","args","dp","calendar","current","clearSelection","add","Event","id","guid","text","getHours","getMinutes","Modal","prompt","then","modal","result","startDate","eventDeleteHandling","onEventClick","e","console","log","data","update","onBeforeCellRender","onEventEdited","Paint","sendEventsToDb","put","list","component","control"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport { DayPilot, DayPilotCalendar, DayPilotNavigator } from \"daypilot-pro-react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport \"./CalendarStyles.css\";\r\nimport axios from \"axios\";\r\nimport serverURL from \"../serverURL\";\r\n\r\nconst styles = {\r\n    wrap: {\r\n        display: \"flex\"\r\n    },\r\n    left: {\r\n        marginRight: \"10px\"\r\n    },\r\n    main: {\r\n        flexGrow: \"1\"\r\n    }\r\n};\r\nconst cells = [\r\n    {\r\n        start: \"2021-09-17T10:30:00\",\r\n        end: \"2021-09-17T13:00:00\",\r\n    },\r\n    {\r\n        start: \"2021-09-15T10:30:00\",\r\n        end: \"2021-09-15T13:00:00\",\r\n    },\r\n    {\r\n        start: \"2021-09-16T10:30:00\",\r\n        end: \"2021-09-16T13:00:00\",\r\n    },\r\n]\r\n\r\nconst Calendar = (props) => {\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const location = useLocation();\r\n    const [times ,setTimes] = useState(props.events)\r\n    const [group, setGroup] = useState(location.state.group);\r\n\r\n    useEffect(() => {\r\n        if (location.state && location.state.edit)\r\n            setIsEdit(true);\r\n    }, [])\r\n    \r\n    const [style, setStyle] = useState({\r\n        viewType: \"Week\",\r\n        durationBarVisible: false,\r\n        timeRangeSelectedHandling: \"Enabled\",\r\n        onTimeRangeSelected: args => {\r\n            let dp = calendar.current;\r\n            if (location.state.edit) {\r\n                dp.clearSelection();\r\n                dp.events.add(new DayPilot.Event({\r\n                    start: args.start,\r\n                    end: args.end,\r\n                    id: DayPilot.guid(),\r\n                    text: args.start.getHours() + \":\" + (args.start.getMinutes() ? args.start.getMinutes() : \"00\") + \" - \" +\r\n                        args.end.getHours() + \":\" + (args.end.getMinutes() ? args.end.getMinutes() : \"00\")\r\n                }));\r\n            }\r\n            else {\r\n                DayPilot.Modal.prompt(\"Create a new event:\", \"Event 1\").then(function (modal) {\r\n                    dp.clearSelection();\r\n                    if (!modal.result) { return; }\r\n                    dp.events.add(new DayPilot.Event({\r\n                        start: args.start,\r\n                        end: args.end,\r\n                        id: DayPilot.guid(),\r\n                        text: modal.result\r\n                    }));\r\n                });\r\n            }\r\n\r\n        }, startDate: '2021-09-15',\r\n        events: [...props.events],\r\n        // events: [{\r\n        //     id: 1,\r\n        //     text: \"Event 1\",\r\n        //     start: \"2021-09-13T10:30:00\",\r\n        //     end: \"2021-09-13T13:00:00\",\r\n        //     moveDisabled: true,\r\n        //     clickDisabled: true,\r\n        //     resizeDisabled: true,\r\n        //     deleteDisabled: true,\r\n        // },\r\n        // {\r\n        //     id: 2,\r\n        //     text: \"Event 2\",\r\n        //     start: \"2021-09-14T09:30:00\",\r\n        //     end: \"2021-09-14T11:30:00\",\r\n        //     backColor: \"#38761d\"\r\n        // },\r\n        // {\r\n        //     id: 2,\r\n        //     text: \"Event 3\",\r\n        //     start: \"2021-09-14T12:00:00\",\r\n        //     end: \"2021-09-14T15:00:00\",\r\n        //     backColor: \"#cc4125\"\r\n        // }],\r\n        eventDeleteHandling: \"Update\",\r\n        onEventClick: args => {\r\n            let dp = calendar.current;\r\n            DayPilot.Modal.prompt(\"Update event text:\", args.e.text()).then(function (modal) {\r\n                if (!modal.result) { return; }\r\n                console.log(args);\r\n                args.e.data.text = modal.result;\r\n                dp.events.update(args.e);\r\n            });\r\n        },\r\n        onBeforeCellRender: args => {\r\n            // if (cells.filter(c => args.cell.start >= c.start && args.cell.end <= c.end).length > 0) {\r\n            //     args.cell.backColor = \"#a0e1ec\";\r\n            // }\r\n            // else {\r\n            //     args.cell.disabled = true;\r\n            // }\r\n        },\r\n        onEventEdited: args => {\r\n            console.log(\"event edit\", args);\r\n        }\r\n    });\r\n    useEffect(() => {        \r\n        console.log(props.events);\r\n        setTimes(props.events)\r\n        // setStyle({...style, \r\n        //     events:props.events.slice() \r\n        // });\r\n    }, [props.events])\r\n    //const [events, setEvents] = useState([])\r\n    //const [startDate, setStartDate] = useState(\"2021-09-15\");\r\n    const calendar = useRef(null);\r\n    // useEffect(() => {\r\n    //setEvents();\r\n    // setStartDate('2021-09-10')\r\n    // }, [])\r\n    const Paint = () => {\r\n        const start = \"2021-09-15T12:00:00\";\r\n        const end = \"2021-09-15T15:00:00\";\r\n        //  calendar.current.Row.cells.forRange(start, end).backColor = \"red\";\r\n    }\r\n    const sendEventsToDb = async () => {\r\n        const result = await axios.put(\"\" + serverURL + \"api/Event\", {\r\n            events: calendar.current.events.list,\r\n            group: group\r\n        });\r\n        console.log(result);\r\n    }\r\n    return (\r\n        <div style={styles.wrap}>\r\n            <div style={styles.left}>\r\n                <DayPilotNavigator\r\n                    selectMode={\"week\"}\r\n                    showMonths={3}\r\n                    skipMonths={3}\r\n                //onTimeRangeSelected={args => {\r\n                //    setStartDate(args.day)\r\n                //}}\r\n                />\r\n            </div>\r\n            <div style={styles.main}>\r\n                <DayPilotCalendar\r\n\r\n                    {...style}\r\n                    // {...events}\r\n\r\n                    ref={component => {\r\n                        calendar.current = component && component.control;\r\n                    }}\r\n\r\n                />\r\n            </div>\r\n            <button onClick={() => Paint()}>Paint cells</button>\r\n            <button onClick={() => sendEventsToDb()}>calender</button>\r\n        </div>)\r\n}\r\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}