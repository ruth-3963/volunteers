{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilani\\\\project\\\\volunteers\\\\src\\\\scheduler\\\\calendar3.jsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ScheduleComponent, Day, Week, Month, Inject, ViewsDirective, ViewDirective } from '@syncfusion/ej2-react-schedule';\nimport { extend, createElement } from '@syncfusion/ej2-base';\nimport scheduleData from './datasource';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calendar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.data = extend([], scheduleData, null, true);\n  }\n\n  onRenderCell(args) {\n    if (args.elementType == 'workCells' || args.elementType == 'monthCells') {\n      let weekEnds = [0, 6];\n\n      if (weekEnds.indexOf(args.date.getDay()) >= 0) {\n        let ele = createElement('div', {\n          innerHTML: \"<img src='https://ej2.syncfusion.com/demos/src/schedule/images/newyear.svg' />\",\n          className: 'templatewrap'\n        });\n        args.element.appendChild(ele);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ScheduleComponent, {\n      height: \"550px\",\n      currentView: \"Month\",\n      selectedDate: new Date(2018, 1, 15),\n      eventSettings: {\n        dataSource: this.data\n      },\n      renderCell: this.onRenderCell.bind(this),\n      children: [/*#__PURE__*/_jsxDEV(ViewsDirective, {\n        children: [/*#__PURE__*/_jsxDEV(ViewDirective, {\n          option: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewDirective, {\n          option: \"WorkWeek\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewDirective, {\n          option: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Inject, {\n        services: [Day, Week, Month]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["C:/Users/ilani/project/volunteers/src/scheduler/calendar3.jsx"],"names":["React","ReactDOM","ScheduleComponent","Day","Week","Month","Inject","ViewsDirective","ViewDirective","extend","createElement","scheduleData","Calendar","Component","constructor","arguments","data","onRenderCell","args","elementType","weekEnds","indexOf","date","getDay","ele","innerHTML","className","element","appendChild","render","Date","dataSource","bind"],"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,iBAAT,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuCC,KAAvC,EAA8CC,MAA9C,EAAsDC,cAAtD,EAAsEC,aAAtE,QAA2F,gCAA3F;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,sBAAtC;AACA,OAAOC,YAAP,MAA0B,cAA1B;;;AACA,MAAMC,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AACnCC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,IAAL,GAAYP,MAAM,CAAC,EAAD,EAAKE,YAAL,EAAmB,IAAnB,EAAyB,IAAzB,CAAlB;AACH;;AACDM,EAAAA,YAAY,CAACC,IAAD,EAAO;AACf,QAAIA,IAAI,CAACC,WAAL,IAAoB,WAApB,IAAmCD,IAAI,CAACC,WAAL,IAAoB,YAA3D,EAAyE;AACrE,UAAIC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAf;;AACA,UAAIA,QAAQ,CAACC,OAAT,CAAkBH,IAAI,CAACI,IAAN,CAAYC,MAAZ,EAAjB,KAA0C,CAA9C,EAAiD;AAC7C,YAAIC,GAAG,GAAGd,aAAa,CAAC,KAAD,EAAQ;AAC3Be,UAAAA,SAAS,EAAE,gFADgB;AAE3BC,UAAAA,SAAS,EAAE;AAFgB,SAAR,CAAvB;AAICR,QAAAA,IAAI,CAACS,OAAN,CAAeC,WAAf,CAA2BJ,GAA3B;AACH;AACJ;AACJ;;AACDK,EAAAA,MAAM,GAAG;AACL,wBAAO,QAAC,iBAAD;AAAmB,MAAA,MAAM,EAAC,OAA1B;AAAkC,MAAA,WAAW,EAAC,OAA9C;AAAsD,MAAA,YAAY,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAApE;AAA2F,MAAA,aAAa,EAAE;AAAEC,QAAAA,UAAU,EAAE,KAAKf;AAAnB,OAA1G;AAAqI,MAAA,UAAU,EAAE,KAAKC,YAAL,CAAkBe,IAAlB,CAAuB,IAAvB,CAAjJ;AAAA,8BACP,QAAC,cAAD;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADO,eAMP,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,CAAC7B,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAlB;AAAA;AAAA;AAAA;AAAA,cANO;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAQH;;AA1BkC;;AA4BvC,eAAeO,QAAf","sourcesContent":["\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { ScheduleComponent, Day, Week, Month, Inject, ViewsDirective, ViewDirective } from '@syncfusion/ej2-react-schedule';\r\nimport { extend, createElement } from '@syncfusion/ej2-base';\r\nimport scheduleData  from './datasource';\r\nclass Calendar extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = extend([], scheduleData, null, true);\r\n    }\r\n    onRenderCell(args) {\r\n        if (args.elementType == 'workCells' || args.elementType == 'monthCells') {\r\n            let weekEnds = [0, 6];\r\n            if (weekEnds.indexOf((args.date).getDay()) >= 0) {\r\n                let ele = createElement('div', {\r\n                    innerHTML: \"<img src='https://ej2.syncfusion.com/demos/src/schedule/images/newyear.svg' />\",\r\n                    className: 'templatewrap'\r\n                });\r\n                (args.element).appendChild(ele);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return <ScheduleComponent height='550px' currentView='Month' selectedDate={new Date(2018, 1, 15)} eventSettings={{ dataSource: this.data }} renderCell={this.onRenderCell.bind(this)}>\r\n        <ViewsDirective>\r\n          <ViewDirective option='Week'/>\r\n          <ViewDirective option='WorkWeek'/>\r\n          <ViewDirective option='Month'/>\r\n        </ViewsDirective>\r\n        <Inject services={[Day, Week, Month]}/>\r\n      </ScheduleComponent>;\r\n    }\r\n}\r\nexport default Calendar;\r\n"]},"metadata":{},"sourceType":"module"}