{"ast":null,"code":"import ToText from './totext';\nimport parseText from './parsetext';\nimport RRule from '../index';\nimport ENGLISH from './i18n';\n/*!\r\n* rrule.js - Library for working with recurrence rules for calendar dates.\r\n* https://github.com/jakubroztocil/rrule\r\n*\r\n* Copyright 2010, Jakub Roztocil and Lars Schoning\r\n* Licenced under the BSD licence.\r\n* https://github.com/jakubroztocil/rrule/blob/master/LICENCE\r\n*\r\n*/\n\n/**\r\n *\r\n * Implementation of RRule.fromText() and RRule::toText().\r\n *\r\n *\r\n * On the client side, this file needs to be included\r\n * when those functions are used.\r\n *\r\n */\n// =============================================================================\n// fromText\n// =============================================================================\n\n/**\r\n * Will be able to convert some of the below described rules from\r\n * text format to a rule object.\r\n *\r\n *\r\n * RULES\r\n *\r\n * Every ([n])\r\n *       day(s)\r\n *     | [weekday], ..., (and) [weekday]\r\n *     | weekday(s)\r\n *     | week(s)\r\n *     | month(s)\r\n *     | [month], ..., (and) [month]\r\n *     | year(s)\r\n *\r\n *\r\n * Plus 0, 1, or multiple of these:\r\n *\r\n * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]\r\n *\r\n * on [weekday], ..., (and) [weekday]\r\n *\r\n * on the [monthday], [monthday], ... (and) [monthday] (day of the month)\r\n *\r\n * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)\r\n *\r\n *\r\n * Plus 0 or 1 of these:\r\n *\r\n * for [n] time(s)\r\n *\r\n * until [date]\r\n *\r\n * Plus (.)\r\n *\r\n *\r\n * Definitely no supported for parsing:\r\n *\r\n * (for year):\r\n *     in week(s) [n], ..., (and) [n]\r\n *\r\n *     on the [yearday], ..., (and) [n] day of the year\r\n *     on day [yearday], ..., (and) [n]\r\n *\r\n *\r\n * NON-TERMINALS\r\n *\r\n * [n]: 1, 2 ..., one, two, three ..\r\n * [month]: January, February, March, April, May, ... December\r\n * [weekday]: Monday, ... Sunday\r\n * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...\r\n * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..\r\n * [date]:\r\n *     [month] (0-31(,) ([year])),\r\n *     (the) 0-31.(1-12.([year])),\r\n *     (the) 0-31/(1-12/([year])),\r\n *     [weekday]\r\n *\r\n * [year]: 0000, 0001, ... 01, 02, ..\r\n *\r\n * Definitely not supported for parsing:\r\n *\r\n * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..\r\n *\r\n * @param {String} text\r\n * @return {Object, Boolean} the rule, or null.\r\n */\n\nvar fromText = function (text, language) {\n  if (language === void 0) {\n    language = ENGLISH;\n  }\n\n  return new RRule(parseText(text, language) || undefined);\n};\n\nvar common = ['count', 'until', 'interval', 'byweekday', 'bymonthday', 'bymonth'];\nToText.IMPLEMENTED = [];\nToText.IMPLEMENTED[RRule.HOURLY] = common;\nToText.IMPLEMENTED[RRule.MINUTELY] = common;\nToText.IMPLEMENTED[RRule.DAILY] = ['byhour'].concat(common);\nToText.IMPLEMENTED[RRule.WEEKLY] = common;\nToText.IMPLEMENTED[RRule.MONTHLY] = common;\nToText.IMPLEMENTED[RRule.YEARLY] = ['byweekno', 'byyearday'].concat(common); // =============================================================================\n// Export\n// =============================================================================\n\nvar toText = function (rrule, gettext, language, dateFormatter) {\n  return new ToText(rrule, gettext, language, dateFormatter).toString();\n};\n\nvar isFullyConvertible = ToText.isFullyConvertible;\nexport { fromText, parseText, isFullyConvertible, toText };","map":{"version":3,"sources":["../../../../src/nlp/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAA+C,UAA/C;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAP,MAAkB,UAAlB;AACA,OAAO,OAAP,MAAkC,QAAlC;AAEA;;;;;;;;AAQE;;AAEF;;;;;;;;AAQG;AAEH;AACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEG;;AACH,IAAM,QAAQ,GAAG,UAAU,IAAV,EAAwB,QAAxB,EAAoD;AAA5B,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,OAAA;AAA4B;;AACnE,SAAO,IAAI,KAAJ,CAAU,SAAS,CAAC,IAAD,EAAO,QAAP,CAAT,IAA6B,SAAvC,CAAP;AACD,CAFD;;AAIA,IAAM,MAAM,GAAG,CACb,OADa,EAEb,OAFa,EAGb,UAHa,EAIb,WAJa,EAKb,YALa,EAMb,SANa,CAAf;AASA,MAAM,CAAC,WAAP,GAAqB,EAArB;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,MAAzB,IAAmC,MAAnC;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,QAAzB,IAAqC,MAArC;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,KAAzB,IAAkC,CAAC,QAAD,EAAW,MAAX,CAAkB,MAAlB,CAAlC;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,MAAzB,IAAmC,MAAnC;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,OAAzB,IAAoC,MAApC;AACA,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,MAAzB,IAAmC,CAAC,UAAD,EAAa,WAAb,EAA0B,MAA1B,CAAiC,MAAjC,CAAnC,C,CAEA;AACA;AACA;;AAEA,IAAM,MAAM,GAAG,UAAU,KAAV,EAAwB,OAAxB,EAA2C,QAA3C,EAAgE,aAAhE,EAA6F;AAC1G,SAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,aAArC,EAAoD,QAApD,EAAP;AACD,CAFD;;AAIQ,IAAA,kBAAA,GAAA,MAAA,CAAA,kBAAA;AASR,SAAS,QAAT,EAAmB,SAAnB,EAA8B,kBAA9B,EAAkD,MAAlD","sourceRoot":"","sourcesContent":["import ToText from './totext';\r\nimport parseText from './parsetext';\r\nimport RRule from '../index';\r\nimport ENGLISH from './i18n';\r\n/*!\r\n* rrule.js - Library for working with recurrence rules for calendar dates.\r\n* https://github.com/jakubroztocil/rrule\r\n*\r\n* Copyright 2010, Jakub Roztocil and Lars Schoning\r\n* Licenced under the BSD licence.\r\n* https://github.com/jakubroztocil/rrule/blob/master/LICENCE\r\n*\r\n*/\r\n/**\r\n *\r\n * Implementation of RRule.fromText() and RRule::toText().\r\n *\r\n *\r\n * On the client side, this file needs to be included\r\n * when those functions are used.\r\n *\r\n */\r\n// =============================================================================\r\n// fromText\r\n// =============================================================================\r\n/**\r\n * Will be able to convert some of the below described rules from\r\n * text format to a rule object.\r\n *\r\n *\r\n * RULES\r\n *\r\n * Every ([n])\r\n *       day(s)\r\n *     | [weekday], ..., (and) [weekday]\r\n *     | weekday(s)\r\n *     | week(s)\r\n *     | month(s)\r\n *     | [month], ..., (and) [month]\r\n *     | year(s)\r\n *\r\n *\r\n * Plus 0, 1, or multiple of these:\r\n *\r\n * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]\r\n *\r\n * on [weekday], ..., (and) [weekday]\r\n *\r\n * on the [monthday], [monthday], ... (and) [monthday] (day of the month)\r\n *\r\n * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)\r\n *\r\n *\r\n * Plus 0 or 1 of these:\r\n *\r\n * for [n] time(s)\r\n *\r\n * until [date]\r\n *\r\n * Plus (.)\r\n *\r\n *\r\n * Definitely no supported for parsing:\r\n *\r\n * (for year):\r\n *     in week(s) [n], ..., (and) [n]\r\n *\r\n *     on the [yearday], ..., (and) [n] day of the year\r\n *     on day [yearday], ..., (and) [n]\r\n *\r\n *\r\n * NON-TERMINALS\r\n *\r\n * [n]: 1, 2 ..., one, two, three ..\r\n * [month]: January, February, March, April, May, ... December\r\n * [weekday]: Monday, ... Sunday\r\n * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...\r\n * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..\r\n * [date]:\r\n *     [month] (0-31(,) ([year])),\r\n *     (the) 0-31.(1-12.([year])),\r\n *     (the) 0-31/(1-12/([year])),\r\n *     [weekday]\r\n *\r\n * [year]: 0000, 0001, ... 01, 02, ..\r\n *\r\n * Definitely not supported for parsing:\r\n *\r\n * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..\r\n *\r\n * @param {String} text\r\n * @return {Object, Boolean} the rule, or null.\r\n */\r\nvar fromText = function (text, language) {\r\n    if (language === void 0) { language = ENGLISH; }\r\n    return new RRule(parseText(text, language) || undefined);\r\n};\r\nvar common = [\r\n    'count',\r\n    'until',\r\n    'interval',\r\n    'byweekday',\r\n    'bymonthday',\r\n    'bymonth'\r\n];\r\nToText.IMPLEMENTED = [];\r\nToText.IMPLEMENTED[RRule.HOURLY] = common;\r\nToText.IMPLEMENTED[RRule.MINUTELY] = common;\r\nToText.IMPLEMENTED[RRule.DAILY] = ['byhour'].concat(common);\r\nToText.IMPLEMENTED[RRule.WEEKLY] = common;\r\nToText.IMPLEMENTED[RRule.MONTHLY] = common;\r\nToText.IMPLEMENTED[RRule.YEARLY] = ['byweekno', 'byyearday'].concat(common);\r\n// =============================================================================\r\n// Export\r\n// =============================================================================\r\nvar toText = function (rrule, gettext, language, dateFormatter) {\r\n    return new ToText(rrule, gettext, language, dateFormatter).toString();\r\n};\r\nvar isFullyConvertible = ToText.isFullyConvertible;\r\nexport { fromText, parseText, isFullyConvertible, toText };\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}