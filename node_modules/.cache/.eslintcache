[{"C:\\Users\\User\\volunteers\\src\\index.js":"1","C:\\Users\\User\\volunteers\\src\\App.js":"2","C:\\Users\\User\\volunteers\\src\\components\\topBar.jsx":"3","C:\\Users\\User\\volunteers\\src\\components\\fallBack.jsx":"4","C:\\Users\\User\\volunteers\\src\\components\\protectedRoute.jsx":"5","C:\\Users\\User\\volunteers\\src\\components\\about.jsx":"6","C:\\Users\\User\\volunteers\\src\\components\\profile\\profile.jsx":"7","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\calendar.jsx":"8","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\editScheduer.jsx":"9","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\chooseEvents.jsx":"10","C:\\Users\\User\\volunteers\\src\\components\\login\\SignIn.jsx":"11","C:\\Users\\User\\volunteers\\src\\components\\login\\signUp.jsx":"12","C:\\Users\\User\\volunteers\\src\\components\\login\\resetPassword.jsx":"13","C:\\Users\\User\\volunteers\\src\\components\\login\\forgetPassword.jsx":"14","C:\\Users\\User\\volunteers\\src\\components\\home\\home.jsx":"15","C:\\Users\\User\\volunteers\\src\\components\\group\\create_group.jsx":"16","C:\\Users\\User\\volunteers\\src\\components\\group\\group.jsx":"17","C:\\Users\\User\\volunteers\\src\\components\\group\\addVolunteer.jsx":"18","C:\\Users\\User\\volunteers\\src\\config\\config.js":"19","C:\\Users\\User\\volunteers\\src\\components\\group\\chooseColor.jsx":"20","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\chooseDate.jsx":"21","C:\\Users\\User\\volunteers\\src\\config\\colors.js":"22"},{"size":329,"mtime":1628157752178,"results":"23","hashOfConfig":"24"},{"size":5369,"mtime":1643194448302,"results":"25","hashOfConfig":"24"},{"size":2224,"mtime":1641980553309,"results":"26","hashOfConfig":"24"},{"size":362,"mtime":1641236012536,"results":"27","hashOfConfig":"24"},{"size":437,"mtime":1641836080324,"results":"28","hashOfConfig":"24"},{"size":67,"mtime":1641980109515,"results":"29","hashOfConfig":"24"},{"size":11571,"mtime":1643194448301,"results":"30","hashOfConfig":"24"},{"size":4689,"mtime":1643192465825,"results":"31","hashOfConfig":"24"},{"size":7684,"mtime":1643194448302,"results":"32","hashOfConfig":"24"},{"size":4860,"mtime":1643194448309,"results":"33","hashOfConfig":"24"},{"size":8930,"mtime":1643194448308,"results":"34","hashOfConfig":"24"},{"size":7318,"mtime":1643194448309,"results":"35","hashOfConfig":"24"},{"size":5136,"mtime":1643191860049,"results":"36","hashOfConfig":"24"},{"size":2939,"mtime":1643191860049,"results":"37","hashOfConfig":"24"},{"size":1882,"mtime":1643193859887,"results":"38","hashOfConfig":"24"},{"size":3236,"mtime":1643194448307,"results":"39","hashOfConfig":"24"},{"size":1019,"mtime":1643194448307,"results":"40","hashOfConfig":"24"},{"size":5314,"mtime":1643194632927,"results":"41","hashOfConfig":"24"},{"size":68,"mtime":1643191547648,"results":"42","hashOfConfig":"24"},{"size":4034,"mtime":1643194448306,"results":"43","hashOfConfig":"24"},{"size":3007,"mtime":1643189247954,"results":"44","hashOfConfig":"24"},{"size":2574,"mtime":1643191547649,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1x48phz",{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"48"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\User\\volunteers\\src\\index.js",[],["107","108"],"C:\\Users\\User\\volunteers\\src\\App.js",["109","110","111","112","113","114","115","116","117","118"],"import React, { createContext, useState, useEffect, useMemo, useReducer, useRef } from 'react';\r\nimport { ErrorBoundary } from 'react-error-boundary'\r\nimport TopBar from './components/topBar'\r\nimport { About } from './components/about'\r\nimport Calendar from './components/scheduler/calendar';\r\nimport SignIn from './components/login/SignIn';\r\nimport SignUp from './components/login/signUp';\r\nimport { Profile } from './components/profile/profile';\r\nimport { Home } from './components/home/home'\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { Fallback } from './components/fallBack';\r\nimport CreateGroup from './components/group/create_group';\r\nimport Group from './components/group/group';\r\nimport AddVolunteer from './components/group/addVolunteer';\r\nimport EditScheduler2 from './components/scheduler/editScheduer';\r\nimport ChooseEvents from './components/scheduler/chooseEvents';\r\nimport ProtectedRoute from './components/protectedRoute';\r\nimport { ResetPassword } from './components/login/resetPassword';\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport { useHistory, useLocation, Redirect, prot } from \"react-router-dom\";\r\nimport { PortableWifiOffRounded } from '@material-ui/icons';\r\nimport ForgetPassword from './components/login/forgetPassword';\r\nexport const UserContext = React.createContext({ user: {}, setUser: () => { } });\r\nexport const GroupContext = React.createContext({ group: {}, setGroup: () => { } })\r\nexport const userToGroupContext = React.createContext({ userToGroup: {}, setUserToGroup: () => { } });\r\nconst groupContext = createContext();\r\nconst App = () => {\r\n  const [user, setUser] = useState({});\r\n  const [group, setGroup] = useState({});\r\n  const [userToGroup, setUserToGroup] = useState({});\r\n  const userValue = useMemo(() => ({ user, setUser }), [user]);\r\n  const groupValue = useMemo(() => ({ group, setGroup }), [group]);\r\n  const userToGroupValue = useMemo(() => ({ userToGroup, setUserToGroup }), [userToGroup]);\r\n  const [isLogin, setIsLogin] = useState(false);\r\n  const [tryAgain, setTryAgain] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const history = useHistory();\r\n  const forceUpdate = useReducer(() => ({}))[1];\r\n  useEffect(() => {\r\n    const localGroup = JSON.parse(localStorage.getItem(\"group\"));\r\n    const localUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    const localUserToGroup = JSON.parse(localStorage.getItem(\"userToGroup\"));\r\n    if (localGroup) {\r\n      setGroup(localGroup);\r\n      setIsLogin(true)\r\n    }\r\n    if (localUser) setUser(localUser);\r\n    if (localUserToGroup) setUserToGroup(localUserToGroup);\r\n    setIsLoading(true)\r\n  }, []);\r\n\r\n  const signOut = () => {\r\n    localStorage.setItem(\"user\", null);\r\n    localStorage.setItem(\"group\", null);\r\n    localStorage.setItem(\"userToGroup\", null);\r\n    setUser(null); setGroup(null); setUserToGroup(null);\r\n    setIsLogin(false);\r\n    history.push(\"/\");\r\n  }\r\n  return (\r\n    <UserContext.Provider value={userValue}>\r\n      <GroupContext.Provider value={groupValue}>\r\n        <userToGroupContext.Provider value={userToGroupValue}>\r\n          <ErrorBoundary FallbackComponent={Fallback}\r\n            onError={(error, errorInfo) => console.log({ error, errorInfo })}\r\n            onReset={() => {\r\n              forceUpdate();\r\n            }}>\r\n            {isLoading && <><TopBar isLogin={isLogin} signOut={() => signOut()}></TopBar>\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  {isLogin && group && group.id ? <Redirect to={`/schedule/${group.id}`} /> :\r\n                    <Redirect push to=\"/signin\" />}\r\n                </Route>\r\n\r\n                <Route exect path=\"/signin/:email?/\"\r\n                  render={(props) =>\r\n                    <SignIn {...props} isLogin={isLogin} setIsLogin={(val) => setIsLogin(val)} />\r\n\r\n                  }\r\n                />\r\n                <Route path=\"/profile/:id\" render={({ match, history }) => {\r\n                  return (user && user.id && match.params && match.params.id && match.params.id == user.id)\r\n                    ? <Profile /> : history.goBack();\r\n                }} />\r\n                <Route exect path=\"/signup/:email?/\" component={SignUp} />\r\n                <Route exect path=\"/home\" component={Home} />\r\n                <Route exect path=\"/about\" component={About} />\r\n                <Route exect path=\"/createGroup\" component={CreateGroup} />\r\n                <Route exect path=\"/group\" component={Group} />\r\n                <Route exect path=\"/addVolunteers\" component={AddVolunteer} />\r\n                <Route exect path=\"/forgetPassword\" component={ForgetPassword} />\r\n                <Route exact path=\"/reset/:token\" component={ResetPassword} />\r\n                <ProtectedRoute exect path=\"/chooseEvents/:id\">\r\n                  <ChooseEvents />\r\n                </ProtectedRoute>\r\n                <ProtectedRoute exect path=\"/editSchedule/:id\">\r\n                  <EditScheduler2 />\r\n                </ProtectedRoute>\r\n                <ProtectedRoute exect path=\"/schedule/:id\">\r\n                  <Calendar></Calendar>\r\n                </ProtectedRoute>\r\n\r\n              </Switch></>\r\n            }\r\n          </ErrorBoundary>\r\n        </userToGroupContext.Provider>\r\n      </GroupContext.Provider>\r\n    </UserContext.Provider>\r\n  )\r\n\r\n}\r\nexport default App;","C:\\Users\\User\\volunteers\\src\\components\\topBar.jsx",["119","120","121","122","123"],"import React, { useContext } from \"react\";\r\nimport logo from '../logo_min.jpg';\r\nimport { Navbar, Container, NavDropdown, Nav } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from \"react-bootstrap\";\r\nimport { UserContext, userToGroupContext, GroupContext } from \"../App\";\r\nconst TopBar = (props) => {\r\n    const { userToGroup, setUserToGroup } = useContext(userToGroupContext);\r\n    return (\r\n        <Navbar sticky=\"top\" bg=\"light\" expand=\"lg\">\r\n            <Container>\r\n                <Navbar.Brand >EveryToOne</Navbar.Brand>\r\n                <img src={logo} width=\"40\" height=\"40\" />\r\n\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-start\">\r\n                        <Nav.Link href=\"/home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"/about\">About</Nav.Link>\r\n                       {userToGroup && userToGroup.user_id && <Nav.Link href={`/profile/${userToGroup.user_id}`}>Profile</Nav.Link>}\r\n\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"me-auto\">\r\n\r\n                        {userToGroup && userToGroup.is_manager && <>\r\n                            <Nav.Link href={`/editSchedule/${userToGroup.group_id}`}>Edit Schedule</Nav.Link>\r\n                            <Nav.Link href={`/addVolunteers`}>Add volunteers</Nav.Link><span> </span>\r\n                            <Nav.Link href={`/schedule/${userToGroup.group_id}`}>Schedule</Nav.Link></>\r\n                        }\r\n                        {userToGroup &&<Nav.Link href={`/chooseEvents/${userToGroup.group_id}`}>Choose events</Nav.Link>}\r\n\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    {\r\n                        props.isLogin ? <Button variant=\"link\" onClick={() => props.signOut()}>Sign out</Button> :\r\n                            <Link to=\"/signin\">SignIn</Link>\r\n                    }\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\nexport default TopBar;","C:\\Users\\User\\volunteers\\src\\components\\fallBack.jsx",[],"C:\\Users\\User\\volunteers\\src\\components\\protectedRoute.jsx",["124","125"],"import React from \"react\";\r\nimport { Redirect, Route,useHistory } from \"react-router-dom\";\r\n\r\nfunction ProtectedRoute ({ children, ...rest }) {\r\n    const history = useHistory();\r\n    return (\r\n      <Route {...rest} render={() => {\r\n        return rest.computedMatch.params.id == JSON.parse(localStorage.getItem(\"group\")).id\r\n          ? children\r\n          :history.goBack()\r\n      }} />\r\n    )\r\n  }\r\n\r\nexport default ProtectedRoute;\r\n","C:\\Users\\User\\volunteers\\src\\components\\about.jsx",[],"C:\\Users\\User\\volunteers\\src\\components\\profile\\profile.jsx",["126","127","128","129","130","131"],"\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport axios from 'axios';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport './profile.css'\r\nimport { Button } from 'react-bootstrap';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport ChooseColor from '../group/chooseColor';\r\nimport { useContext } from 'react';\r\nimport { UserContext, userToGroupContext } from '../../App';\r\nimport { Modal, FormControl, Alert } from 'react-bootstrap';\r\nimport { useErrorHandler } from 'react-error-boundary';\r\nimport { serverURL } from '../../config/config';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport const Profile = () => {\r\n    const { user, setUser } = useContext(UserContext);\r\n    const { userToGroup } = useContext(userToGroupContext)\r\n    const [currGroup, setCurrGroup] = useState({});\r\n    const [userGroups, setUserGroup] = useState([]);\r\n    const [showColorAlert, setShowColorAlert] = useState(false);\r\n    const [changeGroup, setChangeGroup] = useState(true);\r\n    const [isInEdit, setIsInEdit] = useState(false);\r\n    const [showValid, setShowValid] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [variantAlert, setVariantAlert] = useState('');\r\n    const [alertMessage, setAlertMessage] = useState('');\r\n    const [password, setPassword] = useState(\"\");\r\n    const [validError, setValidError] = useState(false);\r\n    const [color, setColor] = useState('');\r\n    const errorHandler = useErrorHandler();\r\n\r\n    useEffect(() => {\r\n        formik.values.email = user.email;\r\n        formik.values.phone = user.phone;\r\n        formik.values.name = user.name;\r\n        formik.values.password = user.password;\r\n        formik.values.confirmPassword = user.password;\r\n\r\n    }, []);\r\n    useEffect(async () => {\r\n        try {\r\n            const groups = await axios.get(serverURL + \"GetByManager\", {\r\n                params: {\r\n                    id: user.id,\r\n                }\r\n            });\r\n            console.log(changeGroup);\r\n            setUserGroup(groups.data);\r\n            console.log(changeGroup);\r\n        }\r\n        catch (err) {\r\n            errorHandler(err)\r\n        }\r\n    }, [changeGroup]);\r\n    const handleClose = () => {\r\n        setShowValid(false);\r\n        setValidError(false);\r\n        setPassword(\"\");\r\n    };\r\n    const cancel = () => {\r\n        setIsInEdit(false);\r\n        for (const [key, value] of Object.entries(formik.values)) {\r\n            if (user.hasOwnProperty(key)) {\r\n                formik.values[key] = user[key];\r\n            }\r\n        }\r\n    }\r\n    const checkPassword = () => {\r\n        if (user.password === password) {\r\n            setIsInEdit(true);\r\n            handleClose();\r\n            setPassword(\"\");\r\n        }\r\n        else {\r\n            setValidError(true)\r\n        }\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            phone: '',\r\n        },\r\n        onSubmit: async (values) => {\r\n            axios.put(`${serverURL}api/User/${user.id}`, {\r\n                name: values.name,\r\n                email: values.email,\r\n                password: values.password,\r\n                phone: values.phone\r\n            }).then(result => {\r\n                if (result.data) {\r\n                    localStorage.setItem(\"user\", JSON.stringify(result.data));\r\n                    setUser(result.data)\r\n                    setAlertMessage(\"User updated\");\r\n                    setVariantAlert('success')\r\n                    setIsInEdit(false);\r\n                }\r\n                else {\r\n                    setAlertMessage(\"Occurred error - user not updated\");\r\n                    setVariantAlert('danger')\r\n                }\r\n                setShowAlert(true);\r\n            }).catch(err => errorHandler(err))\r\n        }\r\n    });\r\n\r\n    const changeColor = (group) => {\r\n        setCurrGroup(group);\r\n        setColor(group.color)\r\n        setShowColorAlert(true)\r\n    }\r\n    const deleteGroup = (group) => {\r\n        if (userToGroup.is_manager) {\r\n            alert('you are the manager , yoy cant left the group')\r\n        }\r\n        else {\r\n            axios.post(serverURL + \"removeUserFromGroup\", group);\r\n        }\r\n    }\r\n    const updateGroup = (e) => {\r\n        e.preventDefault();\r\n        setShowValid(true);\r\n    }\r\n    return (\r\n        <>\r\n            {showAlert &&\r\n                <Alert variant={variantAlert} onClose={() => setShowAlert(false)} dismissible>\r\n                    <b>{alertMessage}</b>\r\n                </Alert>}\r\n            <Modal show={showValid} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>User Validation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <b>We want sure that it is really you.<br />Please type password</b><br /><br />\r\n                    <FormControl\r\n                        type=\"password\"\r\n                        placeholder=\"type password...\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        value={password}\r\n                    ></FormControl>\r\n                    {validError && <b style={{ color: \"red\" }}>password doesnt match</b>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={checkPassword}>\r\n                        Check\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            {showColorAlert && <ChooseColor\r\n                showColorAlert={showColorAlert}\r\n                color={color} setColor={(val) => { setColor(val) }}\r\n                setShow={(val) => setShowColorAlert(val)}\r\n                group={currGroup}\r\n                changeGroup={changeGroup}\r\n                setChangeGroup={(val) => setChangeGroup(val)}\r\n            />}\r\n\r\n            <div className=\"container rounded bg-white mt-5 mb-5\" >\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 border-right\">\r\n                        <div className=\"d-flex flex-column align-items-center text-center p-3 py-5\">\r\n                            <span className=\"font-weight-bold\">{formik.values.name}</span><span className=\"text-black-50\">{formik.values.email}</span><span> </span></div>\r\n                    </div>\r\n                    <div className=\"col-md-5 border-right\">\r\n                        <div className=\"p-3 py-5\">\r\n                            <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                                <h4 className=\"text-right\"><u>Profile Settings</u></h4>\r\n                                <Button variant='link' onClick={updateGroup} >update details<Edit></Edit></Button>\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                            </div> <form onSubmit={formik.handleSubmit}>\r\n                                <div className=\"row mt-3\">\r\n                                    <div className=\"col-md-12\"><label className=\"labels\">Name</label>\r\n                                        <input type=\"text\" disabled={!isInEdit} className=\"form-control\" onChange={formik.handleChange} value={formik.values.name} name=\"name\" id=\"name\" /></div>\r\n                                    <div className=\"col-md-12\"><label className=\"labels\">Email</label>\r\n                                        <input type=\"email\" disabled={!isInEdit} className=\"form-control\" onChange={formik.handleChange} value={formik.values.email} name=\"email\" id=\"ëmail\" /></div>\r\n                                    <div className=\"col-md-12\"><label className=\"labels\">Phone</label>\r\n                                        <input type=\"text\" disabled={!isInEdit} className=\"form-control\" onChange={formik.handleChange} value={formik.values.phone} name=\"phone\" id=\"phone\" /></div>\r\n                                    <div className=\"col-md-12\"><label className=\"labels\">Password</label>\r\n                                        <input type=\"password\" disabled={!isInEdit} className=\"form-control\" onChange={formik.handleChange} value={formik.values.password} name=\"password\" id=\"password\" /></div>\r\n                                    <div hidden={!isInEdit} className=\"col-md-12\"><label className=\"labels\">Confirm password</label>\r\n                                        <input type=\"password\" className=\"form-control\" onChange={formik.handleChange} value={formik.values.confirmPassword} name=\"confirmPassword\" id=\"confirmPassword\"\r\n                                            style={formik.values.confirmPassword === formik.values.password ? { borderColor: \"green\" } : { borderColor: \"red\" }} /></div>\r\n                                </div>\r\n\r\n                                <div className=\"mt-3 text-center\" id=\"buttons\">\r\n                                    <Button block hidden={!isInEdit} disabled={formik.values.confirmPassword != formik.values.password}\r\n                                        type=\"submit\" className=\"btn btn-primary profile-button\" >Save Profile</Button>\r\n                                    <Button block hidden={!isInEdit} onClick={cancel} className=\"btn btn-primary profile-button\" >Cancel</Button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"p-3 py-5\">\r\n                            <div className=\"d-flex justify-content-between align-items-center experience\">\r\n                                <span>Groups</span>\r\n                                <Button variant='outline-primary'>create group</Button>\r\n                            </div><br />\r\n\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                {userGroups.map((item, step) => <Accordion.Item eventKey={item.id}>\r\n                                    <Accordion.Header>{item.name}</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <p>\r\n                                            {item.mName ? <><span><strong>Manager : </strong>{item.mName}</span> <br /></> : \"\"}\r\n                                            <strong>Manager email : </strong>{item.mEmail}\r\n                                            {item.color ? <><br /><strong>color : </strong><span style={{ backgroundColor: item.color }}>{item.color}</span> </> : \"\"}\r\n                                        </p>\r\n                                        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                                            <Button variant=\"outline-primary\" onClick={() => changeColor(item)}>change color</Button>\r\n                                            <Button variant=\"outline-primary\" onClick={() => deleteGroup(item)}>delete group</Button>\r\n                                        </div>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                                )}\r\n                            </Accordion>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\calendar.jsx",["132","133","134","135","136"],"import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject, popupClose, ResourcesDirective, ResourceDirective, } from '@syncfusion/ej2-react-schedule';\r\nimport {  useParams } from \"react-router-dom\"\r\nimport Button from 'react-bootstrap/esm/Button';\r\nimport { GroupContext, UserContext, userToGroupContext } from '../../App';\r\nimport { useErrorHandler } from 'react-error-boundary';\r\nimport {serverURL} from '../../config/config';\r\nimport '../../App.css';\r\nimport './CalendarStyles.css';\r\nimport \"../../../node_modules/@syncfusion/ej2-base/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-buttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-calendars/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-dropdowns/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-inputs/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-lists/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-navigations/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-popups/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-splitbuttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-react-schedule/styles/material.css\";\r\n\r\n\r\nconst Calendar = (props) => {\r\n    const { id } = useParams();\r\n    const calendar = useRef(1);\r\n    const [events, setEvents] = useState([]);\r\n    const [ownerData, setOwnerData] = useState([]);\r\n    const { user } = useContext(UserContext);\r\n    const { group } = useContext(GroupContext);\r\n    const { userToGroup} = useContext(userToGroupContext);\r\n    const handleError = useErrorHandler();\r\n    useEffect(async () => {\r\n        if (group) {\r\n            try {\r\n                let result = await axios.get(serverURL + \"api/Event/\" + id);\r\n                if (result.data) {\r\n                    setEvents(result.data);\r\n                }\r\n                result = await axios.get(serverURL + \"getOwnerData\", {\r\n                    params: {\r\n                        groupId: id,\r\n                    }\r\n                });\r\n                setOwnerData(result.data);\r\n            }\r\n            catch (err) {\r\n                handleError(err)\r\n            }\r\n        }\r\n    }, [group]);\r\n\r\n    const onActionBegin = (args) => {\r\n        if (args.changedRecords) {\r\n            setEvents(calendar.current.eventsData);\r\n          }\r\n        if (args.requestType === 'toolbarItemRendering') {\r\n            if (userToGroup && userToGroup.is_manager) {\r\n                let userIconItem = {\r\n                    align: 'Center', text: 'edit schedule',\r\n                    cssClass: 'e-schedule-user-icon',\r\n                    template: `<a href=\"/chooseEvents/${userToGroup.group_id}\" class=\"nav-link\">Choose events</a>`,\r\n                };\r\n                args.items.push(userIconItem);\r\n            }\r\n        }\r\n    }\r\n    const addComments = (event) => {\r\n        const comment = prompt(\"Please enter your comment:\", \"\");\r\n        event = {...event,Description:comment}      \r\n        calendar.current.saveEvent(event);\r\n        return;\r\n\r\n    }\r\n    const cancelVolunteer = (args) => {\r\n        const event = {...event,OwnerId:null};\r\n        calendar.current.saveEvent(event);\r\n    }\r\n    const footerTemplate = (args) => {\r\n        return <div> \r\n            {args.OwnerId && args.OwnerId == user.id  &&\r\n            <Button variant='link' onClick={() => cancelVolunteer(args)}>cancel</Button>} \r\n            <Button variant='link'\r\n                onClick={() => addComments(args)}\r\n                style={{ display: \"unset !important\", float: \"left\" }}> add commnt</Button>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <ScheduleComponent ref={calendar} width='100%' height='100%'        \r\n                quickInfoTemplates={{\r\n                    footer: (e) => footerTemplate(e)\r\n                }}\r\n                eventSettings={{\r\n                    allowAdding: false, allowDeleting: false,  dataSource: events\r\n                }} actionBegin={onActionBegin}  >\r\n                <ResourcesDirective>\r\n                    <ResourceDirective field='OwnerId' title='Volunteer' name='Owners'\r\n                        dataSource={ownerData}\r\n                        textField=\"OwnerText\" idField='Id' colorField='OwnerColor'>\r\n                    </ResourceDirective>\r\n                </ResourcesDirective>\r\n                <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\r\n            </ScheduleComponent>\r\n        </div>);\r\n}\r\nexport default Calendar;\r\n","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\editScheduer.jsx",["137","138","139","140","141","142","143","144","145","146"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport useStateWithCallback from \"use-state-with-callback\";\r\nimport { useParams } from 'react-router';\r\nimport axios from \"axios\";\r\nimport {serverURL} from \"../../config/config\";\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ToastContainer from 'react-bootstrap/ToastContainer'\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport '../../App.css'\r\nimport './CalendarStyles.css'\r\nimport \"../../../node_modules/@syncfusion/ej2-base/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-buttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-calendars/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-dropdowns/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-inputs/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-lists/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-navigations/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-popups/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-splitbuttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-react-schedule/styles/material.css\";\r\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Inject, ViewsDirective, ViewDirective, ResourcesDirective, ResourceDirective, popupOpen } from '@syncfusion/ej2-react-schedule';\r\nimport {  useHistory } from \"react-router-dom\"\r\nimport { useContext } from 'react';\r\nimport { GroupContext } from \"../../App\"\r\nimport ChooseDate from './chooseDate';\r\nimport { useErrorHandler } from 'react-error-boundary';\r\nimport {L10n} from '@syncfusion/ej2-base';\r\nL10n.load({\r\n  'en-US': {\r\n      'schedule': {\r\n          'newEvent': 'Add Shift',\r\n      },\r\n  }\r\n});\r\nconst EditScheduler2 = () => {\r\n  const calendar = useRef();\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [events, setEvents] = useState([]);\r\n  const [newEvents, setNewEvents] = useState([]);\r\n  const [updateEvents, setUpdateEvents] = useState([]);\r\n  const [deletedEvents, setDeletedEvents] = useState([]);\r\n  const [ownerData, setOwnerData] = useState([]);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const { group, setGroup } = useContext(GroupContext);\r\n  const [showDateAlert, setShowDateAlert] = useState(false)\r\n  const handleError = useErrorHandler();\r\n  const [rangeDates, setRangeDates] = useStateWithCallback([], value => {\r\n    if (value.length) {\r\n      const eventsToCalc = calendar.current.eventsData.\r\n        filter(e => e.StartTime > Date.parse(value[0]) && e.EndTime < Date.parse(value[1]));\r\n      setShowDateAlert(false);\r\n      CalcEvents(eventsToCalc);\r\n    }\r\n  });\r\n  const [isDisplayEvents, setIsDisplayEvents] = useStateWithCallback(false, value => {\r\n    if (value) {\r\n      const eventsToCalc = calendar.current.getCurrentViewEvents();\r\n      setShowDateAlert(false);\r\n      CalcEvents(eventsToCalc);\r\n    }\r\n  });\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      let result = await axios.get(serverURL + \"api/Event/\" + id);\r\n      if (result.data) {\r\n        setEvents(result.data);\r\n      }\r\n      result = await axios.get(serverURL + \"getOwnerData\", {\r\n        params: {\r\n          groupId: id,\r\n        }\r\n      });\r\n      setOwnerData(result.data.filter(od => !od.IsDeleted));\r\n    } catch (err) {\r\n      handleError(err)\r\n    }\r\n  }, []);\r\n\r\n  const sendData = async () => {\r\n    try {\r\n      await axios.post(serverURL + \"api/Event\", { events: newEvents, group: group });\r\n      const newUpdate = updateEvents.map(({ Id, OwnerId, EndTimezone, IsAllDay, RecurrenceRule, StartTimezone, ...allProp }) => allProp);\r\n      await axios.put(serverURL + \"UpdateEvents/\", newUpdate);\r\n      const newDel = deletedEvents.map(({ Id, OwnerId, ...allProp }) => allProp);\r\n      await axios.delete(serverURL + \"api/Event\", { data: newDel }, { \"Authorization\": \"***\" });\r\n      const result = await axios.get(serverURL + \"api/Event\", { params: { id: group.id } });\r\n      setEvents(result.data);\r\n      setShowToast(true);\r\n    }\r\n    catch (err) {\r\n      handleError(err);\r\n    }\r\n  }\r\n  const onActionComplete = (args) => {\r\n\r\n    if (args.addedRecords || args.changedRecords || args.deletedRecords) {\r\n      const data = args.data[0];\r\n      if (args.addedRecords.length > 0) {\r\n        setNewEvents([...newEvents, data]);\r\n        setEvents(calendar.current.eventsData);\r\n        return;\r\n      }\r\n      if (args.changedRecords.length > 0) {\r\n        if (data.id) {\r\n          if (updateEvents.find(e => e.id === data.id)) {\r\n            const index1 = updateEvents.indexOf(updateEvents.find(x => x.Id === data.Id));\r\n            const newUpdateEvents = [...updateEvents];\r\n            newUpdateEvents[index1] = data;\r\n            setUpdateEvents(newUpdateEvents);\r\n          }\r\n          else { setUpdateEvents([...updateEvents, data]) };\r\n        }\r\n        else {\r\n          const currEventsToUpdate = [...newEvents];\r\n          const index = currEventsToUpdate.indexOf(currEventsToUpdate.find(x => x.Id === data.Id));\r\n          currEventsToUpdate[index] = data;\r\n          setNewEvents(currEventsToUpdate);\r\n        }\r\n        return;\r\n      }\r\n      if (args.deletedRecords.length > 0 && data.id) {\r\n        setDeletedEvents([...deletedEvents, data]);\r\n      }\r\n    }\r\n\r\n  }\r\n  const onActionBegin = (args) => {\r\n    if (args.changedRecords) {\r\n      setEvents(calendar.current.eventsData);\r\n    }\r\n    if (args.requestType == \"eventCreate\") {\r\n      args.data[0].OwnerId = null;\r\n    }\r\n  }\r\n  const CalcEvents = async (eventsToCalc) => {\r\n    if (eventsToCalc && eventsToCalc.length) {\r\n      try {\r\n        const result = await axios.post(serverURL + \"calcEvents\", {\r\n          events: eventsToCalc\r\n        })\r\n        setEvents(result.data);\r\n      }\r\n      catch (err) {\r\n        handleError(err)\r\n      }\r\n    }\r\n    else {\r\n      alert(\"no events to calc\")\r\n    }\r\n    setIsDisplayEvents(false);\r\n    setRangeDates([]);\r\n  }\r\n\r\n  return (<>\r\n    <ChooseDate\r\n      setShowDateAlert={(val) => setShowDateAlert(val)}\r\n      showDateAlert={showDateAlert}\r\n      calendar={calendar.current}\r\n      calc={(val) => CalcEvents(val)}\r\n    />\r\n    <ToastContainer style={{ position: 'relative' }} className=\"p-3\" position=\"top-end\">\r\n      <Toast onClose={() => setShowToast(false)} show={showToast}\r\n      // delay={3000} autohide\r\n      >\r\n        <Toast.Header>\r\n          <strong className=\"me-auto\">Success</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>המידע נשמר בהצלחה</Toast.Body>\r\n      </Toast>\r\n    </ToastContainer>\r\n    <ButtonComponent onClick={() => sendData()} variant=\"link\" > save schedule</ButtonComponent>\r\n    <ButtonComponent onClick={() => setShowDateAlert(true)}>calc events </ButtonComponent> <ButtonComponent onClick={() => history.push(\"/addVolunteers\")} variant=\"link\" > add volunteers </ButtonComponent>\r\n    <ScheduleComponent\r\n      ref={calendar}\r\n      actionBegin={(args) => onActionBegin(args)}\r\n      actionComplete={(args) => onActionComplete(args)}\r\n      width='100%' height='550px'\r\n      eventSettings={{\r\n        dataSource: events,\r\n        fields: {\r\n          subject: { title: 'Shift Name' },\r\n          description:{title:'Comments'}\r\n        }\r\n      }} >\r\n      <ResourcesDirective>\r\n        <ResourceDirective field='OwnerId' title='Volunteer'\r\n          dataSource={ownerData}\r\n          textField=\"OwnerText\" idField='Id' colorField='OwnerColor'>\r\n        </ResourceDirective>\r\n      </ResourcesDirective>\r\n      <Inject services={[Day, Week, WorkWeek, Month]} />\r\n    </ScheduleComponent></>);\r\n}\r\nexport default EditScheduler2;\r\n","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\chooseEvents.jsx",["147","148","149","150","151","152"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport axios from \"axios\";\r\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject, popupClose, ResourcesDirective, ResourceDirective, } from '@syncfusion/ej2-react-schedule';\r\nimport {serverURL} from '../../config/config';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\nimport ChooseColor from '../group/chooseColor';\r\nimport { useContext } from 'react';\r\nimport { GroupContext, UserContext, userToGroupContext } from '../../App';\r\nimport { useErrorHandler } from 'react-error-boundary';\r\nimport './CalendarStyles.css';\r\nimport '../../App.css'\r\nimport \"../../../node_modules/@syncfusion/ej2-base/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-buttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-calendars/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-dropdowns/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-inputs/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-lists/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-navigations/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-popups/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-splitbuttons/styles/material.css\";\r\nimport \"../../../node_modules/@syncfusion/ej2-react-schedule/styles/material.css\";\r\n\r\nconst ChooseEvents = (props) => {\r\n  const calendar = useRef(1);\r\n  const { id } = useParams()\r\n  const [events, setEvents] = useState([]);\r\n  const [showColorAlert, setShowColorAlert] = useState(false);\r\n  const [color, setColor] = useState('');\r\n  const [ownerData, setOwnerData] = useState([]);\r\n  const { user } = useContext(UserContext);\r\n  const { group } = useContext(GroupContext);\r\n  const { userToGroup, setUserToGroup } = useContext(userToGroupContext);\r\n  const handleError = useErrorHandler();\r\n  useEffect(async () => {\r\n    try {\r\n      const result = await axios.get(serverURL + \"api/Event/\" + id);\r\n      if (result.data) {\r\n        setEvents(result.data);\r\n      }\r\n    }\r\n    catch (err) {\r\n      handleError(err);\r\n    }\r\n  }, []);\r\n  useEffect(async () => {\r\n    try {\r\n      const result = await axios.get(serverURL + \"api/UsersToGroups/\", { params: { groupId: group.id, userId: user.id } });\r\n      if (result.data) {\r\n        localStorage.setItem(\"userToGroup\", JSON.stringify(result.data));\r\n        setUserToGroup(result.data);\r\n        if (!result.data.color) {\r\n          setShowColorAlert(true);\r\n        }\r\n        else {\r\n          setColor(result.data.color);\r\n        }\r\n        setOwnerData([{ Id: user.id, OwnerColor: result.data.color, OwnerText: user.name }]);\r\n      }\r\n    }\r\n    catch (err) {\r\n      handleError(err)\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (color && userToGroup && userToGroup.color) {\r\n      setOwnerData([{ Id: user.id, OwnerColor: color, OwnerText: user.name }]);\r\n    }\r\n  }, [color])\r\n  const saveData = async () => {\r\n    const userId = user.id;\r\n    let events = calendar.current.eventsData;\r\n    let eventToUser = events.filter(e => e.OwnerId === userId).map(e => e.id);\r\n    axios.post(serverURL + \"api/EventToUser\", {\r\n      userId: userId,\r\n      groupId: group.id,\r\n      events: eventToUser\r\n    }).catch(err => handleError(err));\r\n    console.log(calendar.current);\r\n  }\r\n  const onActionBegin = (args) => {\r\n    if (args.changedRecords) {\r\n      setEvents(calendar.current.eventsData);\r\n    }\r\n  }\r\n  const penPopUp = (args) => {\r\n    const userId = user.id;\r\n    if (args.data.OwnerId !== userId) {\r\n      args.data.OwnerId = ownerData[0].Id;\r\n      calendar.current.saveEvent(args.data);\r\n    }\r\n    else {\r\n      args.data.OwnerId = undefined;\r\n      calendar.current.saveEvent(args.data);\r\n    }\r\n    args.cancel = true;\r\n  }\r\n\r\n  return (<div>\r\n    <ButtonComponent variant=\"link\" onClick={() => saveData()}> save schedule</ButtonComponent>\r\n    <ScheduleComponent\r\n      actionBegin={(args) => onActionBegin(args)}\r\n      ref={c => calendar.current = c}\r\n      width='100%' height='550px'\r\n      eventSettings={{ dataSource: events }}\r\n      popupOpen={(args) => penPopUp(args)}\r\n    >\r\n      <ResourcesDirective>\r\n        <ResourceDirective field='OwnerId' title='Owner' name='Owners' dataSource={ownerData} textField=\"OwnerText\" idField='Id' colorField='OwnerColor'>\r\n        </ResourceDirective>\r\n      </ResourcesDirective>\r\n      <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\r\n    </ScheduleComponent>\r\n    <ChooseColor\r\n      showColorAlert={showColorAlert}\r\n      color={color} setColor={(val) => { setColor(val) }}\r\n      setShow={(val) => setShowColorAlert(val)}\r\n      setOwnerData={(val) => setOwnerData(val)}\r\n      group={group} />\r\n  </div>);\r\n}\r\nexport default ChooseEvents;\r\n","C:\\Users\\User\\volunteers\\src\\components\\login\\SignIn.jsx",["153","154","155","156","157","158"],"import { Link, useHistory, useLocation, useParams } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport CloseButton from 'react-bootstrap/CloseButton'\nimport Form from 'react-bootstrap/Form';\nimport { useFormik } from 'formik';\nimport { useErrorHandler } from 'react-error-boundary';\nimport axios from 'axios';\nimport React, { useContext, useCallback, useEffect, useRef, useState } from 'react';\nimport {serverURL} from '../../config/config';\nimport Modal from \"react-bootstrap/Modal\";\nimport { GroupContext, UserContext, userToGroupContext } from '../../App';\nimport './login.css';\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css'\nconst SignIn = (props) => {\n    const email =  new URLSearchParams(props.location.search).get(\"email\")?.slice(0, -1);;\n    const history = useHistory();\n    const location = useLocation();\n    const handleError = useErrorHandler();\n    const { user, setUser } = useContext(UserContext);\n    const { group, setGroup } = useContext(GroupContext);\n    const { userToGroup, setUserToGroup } = useContext(userToGroupContext);\n    const [listOfGroups, setListOfGroups] = useState([]);\n    const [show, setShow] = useState(false);\n    const handleShow = () => { setShow(true) }\n    const handleClose = () => { setShow(false) }\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            email: email?email:'',\n            password: '',\n            group: '',\n            emailValid: ''\n        },\n        onSubmit: async (values) => {\n            const email = values.email\n            if (email === \"\") {\n                formik.values.emailValid = \"please type email\";\n            }\n            else {\n                try {\n                    formik.values.emailValid = \"\";\n                    const password = values.password;\n                    const result = await axios.get(serverURL + \"api/User\", {\n                        params: {\n                            email: email,\n                            password: password\n                        }\n                    });\n                    if (result.data) {\n                        let newUser = result.data;\n                        if (newUser.email && newUser.password) {\n                            localStorage.setItem(\"user\", JSON.stringify(newUser));\n                            setUser(newUser);\n                            const groups = await axios.get(serverURL + \"GetByManager\", {\n                                params: {\n                                    id: result.data.id\n                                }\n                            });\n                            setListOfGroups(groups.data);\n                            props.setIsLogin(true);\n                        }\n                        if (newUser.email && !newUser.password) {\n                            newUser.password = password;\n                            history.push({ pathname: \"/signup\", state: newUser });\n                        }\n                    }\n                    else alert(\"your email or password is incorrect\");\n                }\n                catch (e) {\n                    handleError(e)\n                }\n            }\n        },\n    });\n    useEffect(async () => {\n        if (location && location.state && location.state.from && location.state.from.pathname === \"/signup\") {\n            try {\n                const groups = await axios.get(serverURL + \"GetByManager\", {\n                    params: {\n                        id: location.state.user.id,\n                    }\n                });\n                setListOfGroups(groups.data);\n                props.setIsLogin(true);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }\n\n    }, []);\n  \n    const submitAllValue = async () => {\n        const formikGroup = formik.values.group;\n        if (formikGroup === \"create new group\" || !listOfGroups.length) {\n            history.push(\"/createGroup\");\n        }\n        else {\n            const index = formikGroup ? listOfGroups.findIndex(g => g.name === formikGroup) : 0;\n            let currGroup = listOfGroups[index];\n            try {\n                const resultGroup = await axios.get(serverURL + \"api/Group\", {\n                    params: {\n                        id: currGroup.id,\n                    }\n                });\n                currGroup = resultGroup.data;\n                setGroup(resultGroup.data);\n                localStorage.setItem(\"group\", JSON.stringify(resultGroup.data));\n                const resultUsersToGroups = await axios.get(serverURL + \"api/UsersToGroups\", {\n                    params: {\n                        groupId: currGroup.id,\n                        userId: user.id\n                    }\n                });\n                setUserToGroup(resultUsersToGroups.data)\n                localStorage.setItem(\"userToGroup\", JSON.stringify(resultUsersToGroups.data));\n                if (!resultGroup.data.events || !resultGroup.data.events.length) {\n                    if (resultUsersToGroups.data.is_manager) {\n                        handleShow();\n                    }\n                    else{\n                        alert(\"the manager of this group nt yet declare events\")\n                    }\n                }\n                else {\n                    if (!resultUsersToGroups.data.color) {\n                        history.push({ pathname: \"/chooseEvents/\" + currGroup.id });\n                    }\n                    else if(resultGroup.data.events) {\n                        history.push(\"/schedule/\" + currGroup.id);\n                    }\n                }\n\n            } catch (err) {\n                handleError(err);\n            }\n        };\n    }\n    return (\n        <div className=\"auth-wrapper\">\n            <div className=\"auth-inner\">\n                <form onSubmit={formik.handleSubmit} >\n                    <CloseButton onClick={() => history.push(\"/home\")} />\n                    <h3>Sign In</h3>\n                    <div className=\"form-group\">\n                        <label>Email</label>\n                        <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control\"\n                            onChange={formik.handleChange} value={formik.values.email} disabled={props.isLogin} />\n                        <span id=\"emailValid\" className=\"validMassage\">{formik.values.emailValid}</span>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password</label>\n                        <Link to=\"/forgetPassword\"  > (forget password)</Link>\n                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\"\n                            onChange={formik.handleChange} value={formik.values.password} disabled={props.isLogin} />\n                    </div>\n                    {!props.isLogin ? <><br /><div className=\"form-group\">\n                        <Button type=\"submit\" variant=\"outline-primary\" block>Continue...</Button>\n                    </div></> : \"\"\n                    }\n                    {props.isLogin ?\n                        <><Form.Group >\n                            <Form.Label>select group</Form.Label>\n                            <Form.Control as=\"select\" id=\"group\" name=\"group\" value={formik.values.group} onChange={formik.handleChange}>\n                                {listOfGroups.map((item, step) =>\n                                    <option key={step} title={\"manager : \" + item.mName + \"(\" + item.mEmail + \")\"}>\n                                        {item.name} </option>\n                                )}\n                                <option key={listOfGroups ? listOfGroups.length : 0}>create new group</option>\n                            </Form.Control>\n                        </Form.Group><br /> <Button variant=\"primary\" block onClick={() => submitAllValue()}>Submit</Button></> : \"\"}                </form>\n\n            </div><br />\n            <div className=\"auth-inner\">\n                <h6>You are new volunteer - <Link to=\"/signup\"> Create Account</Link></h6>\n            </div>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Choose what do yo want to do with your group</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>you till dont declare the schedule to your group</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => history.push(`/editSchedule${group.id}`)}>\n                        Edit Schedule\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => { history.push(`/addVolunteers${group.id}`) }}>\n                        Add volunteers\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\nexport default SignIn;","C:\\Users\\User\\volunteers\\src\\components\\login\\signUp.jsx",["159","160","161"],"import React, { useState, useEffect } from \"react\";\r\nimport './login.css';\r\nimport { useFormik } from 'formik';\r\nimport { useHistory } from \"react-router\";\r\nimport axios from 'axios';\r\nimport {serverURL} from '../../config/config';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Button, CloseButton } from 'react-bootstrap';\r\nimport { useContext } from \"react\";\r\nimport { GroupContext, UserContext } from \"../../App\";\r\nimport { useErrorHandler } from \"react-error-boundary\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst SignUp = ({ location }) => {\r\n    const email = new URLSearchParams(location.search).get(\"email\")?.slice(0, -1);;\r\n    const history = useHistory();\r\n    const [matchPassword, setMatchPassword] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const [listOfGroups, setListOfGroups] = useState(null);\r\n    const { group, setGroup } = useContext(GroupContext);\r\n    const { user, setUser } = useContext(UserContext)\r\n    const [events, setEvents] = useState([]);\r\n    const handleError = useErrorHandler();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: email ? email : '',\r\n            password: '',\r\n            phone: '',\r\n            confirm_password: '',\r\n            group: ''\r\n        },\r\n        onSubmit: async (values) => {\r\n            if (matchPassword) {\r\n                const user = {};\r\n                user.name = values.name;\r\n                user.email = values.email;\r\n                user.password = values.password;\r\n                user.phone = values.phone;\r\n                try {\r\n                    const result = await axios.post(serverURL + \"api/User\", {\r\n                        name: user.name,\r\n                        password: user.password,\r\n                        phone: user.phone,\r\n                        email: user.email\r\n                    });\r\n                    setUser(result.data);\r\n                    localStorage.setItem(\"user\", JSON.stringify(result.data));\r\n                    const groups = await axios.get(serverURL + \"GetByManager\", {\r\n                        params: {\r\n                            id: result.data.id,\r\n                        }\r\n                    });\r\n                    setListOfGroups(groups.data);\r\n                    setShow(true);\r\n                }\r\n                catch (err) {\r\n                    handleError(err);\r\n                }\r\n            }\r\n            else {\r\n                alert(\"the passwords doesnt match\");\r\n            }\r\n        },\r\n\r\n    });\r\n    const changePassword = () => {\r\n        const password = formik.values.password;\r\n        const confirm_password = formik.values.confirm_password;\r\n        if (password && confirm_password && password === confirm_password)\r\n            setMatchPassword(true);\r\n        else setMatchPassword(false);\r\n    }\r\n\r\n    useEffect(changePassword, [formik.values.password, formik.values.confirm_password])\r\n    const submitAllValue = async () => {\r\n        const formikGroup = formik.values.group;\r\n        if (formikGroup === \"create new group\" || !listOfGroups.length) {\r\n            history.push({ pathname: \"/createGroup\" });\r\n        }\r\n        else {\r\n            const index = formikGroup ? listOfGroups.findIndex(g => g.name === formikGroup) : 0;\r\n            const newGroup = listOfGroups[index];\r\n            try {\r\n                const result = await axios.get(serverURL + \"api/Group\", {\r\n                    params: {\r\n                        id: newGroup.id,\r\n                    }\r\n                });\r\n                setGroup(result.data);\r\n                localStorage.setItem(\"group\", JSON.stringify(result.data));\r\n                if (result.data.events) {\r\n                    setEvents(JSON.parse(result.data.events));\r\n                    history.push({ pathname: `/schedule${group.id}` });\r\n                }\r\n                else {\r\n                    setShow(true);\r\n                }\r\n            }\r\n            catch (err) {\r\n                handleError(err);\r\n            }\r\n        };\r\n    }\r\n    return (\r\n\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"auth-inner\">\r\n                <form onSubmit={formik.handleSubmit} >\r\n                    <CloseButton onClick={() => history.push(\"/home\")} />\r\n                    <h3>Sign Up</h3>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input type=\"text\" id=\"name\" name=\"name\" className=\"form-control\"\r\n                            onChange={formik.handleChange} value={formik.values.name} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control\"\r\n                            onChange={formik.handleChange} value={formik.values.email} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Password</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\"\r\n                            onChange={formik.handleChange} value={formik.values.password} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>confirm password</label>\r\n                        <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"\r\n                            onChange={formik.handleChange} value={formik.values.confirm_password}\r\n                            className={matchPassword ? \"form-control\" : \"form-control confirm_password_incorrect\"} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Phone</label>\r\n                        <input type=\"text\" id=\"phone\" name=\"phone\" className=\"form-control\"\r\n                            onChange={formik.handleChange} value={formik.values.phone} />\r\n                    </div>\r\n                    <br />\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Create</button>\r\n\r\n                </form>\r\n            </div>\r\n            <Modal show={show} onHide={() => setShow(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>select group</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>select group or create new group</Modal.Body>\r\n                <Modal.Footer>\r\n                    <select className=\"browser-default custom-select\"\r\n                        id=\"group\" name=\"group\" value={formik.values.group} onChange={formik.handleChange}>\r\n                        {listOfGroups ? listOfGroups.map((item, step) =>\r\n                            <option key={step} title={\"manager : \" + item.mName + \"(\" + item.mEmail + \")\"}>\r\n                                {item.name} </option>\r\n                        ) : \"\"}\r\n                        <option key={listOfGroups ? listOfGroups.length : 0}>create new group</option>\r\n                    </select>\r\n                    <Button variant=\"primary\" block onClick={() => submitAllValue()}>Submit</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\nexport default SignUp;","C:\\Users\\User\\volunteers\\src\\components\\login\\resetPassword.jsx",["162","163","164","165","166"],"import React, { useState } from \"react\"\r\nimport { Link, useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Form, Button ,CloseButton} from 'react-bootstrap';\r\nimport { useEffect } from \"react\";\r\nimport {serverURL} from \"../../config/config\";\r\nimport axios from \"axios\";\r\nimport { useErrorHandler } from \"react-error-boundary\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../App\";\r\n\r\nexport const ResetPassword = () => {\r\n\r\n    const {setUser} = useContext(UserContext);\r\n    const { token } = useParams();\r\n    const [userToUpdate, setUserToUpdate] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [updated, setUpdated] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const errorHandler = useErrorHandler();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const loading = {\r\n        margin: '1em',\r\n        fontSize: '24px',\r\n    };\r\n    const updatePassword = (e) => {\r\n        e.preventDefault();\r\n        axios.put(serverURL + \"updatePasswordViaEmail\", {\r\n            email: userToUpdate.email,\r\n            password: password\r\n        }).then(response => {\r\n            if (response.data === \"password updated\") {\r\n                setUpdated(true);\r\n                setError(false);\r\n                userToUpdate.password = password;\r\n                localStorage.setItem(\"user\",JSON.stringify(userToUpdate));\r\n                setUser(userToUpdate);\r\n            }\r\n            else {\r\n                setUpdated(false);\r\n                setError(true);\r\n            }\r\n        }).catch(err => errorHandler(err));\r\n    }\r\n    const handleChange = (e) => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    useEffect(async () => {\r\n\r\n\r\n        axios.get(\"https://localhost:44334/reset\", {\r\n            params: {\r\n                resetPasswordToken: token\r\n            },\r\n        }).then(response => {\r\n            if (response.data) {\r\n                setUserToUpdate(response.data);\r\n                setUpdated(false);\r\n                setIsLoading(false);\r\n                setError(false);\r\n            }\r\n            else {\r\n                setUpdated(false);\r\n                setIsLoading(false);\r\n                setError(true);\r\n            }\r\n        }).catch(error => console.error(error));\r\n\r\n    }, []);\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                <CloseButton onClick={() => history.push(\"/home\")}/>\r\n                    <div style={loading}>\r\n                        <h5><b>Problem resetting password. Please send another reset link.</b></h5>\r\n                        <Link to=\"/\" style={{float:'right'}}>Go Home</Link>\r\n                        <Link to=\"/forgetPassword\" >forgetPassword</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"auth-wrapper\">\r\n                <div className=\"auth-inner\">\r\n                    <div style={loading}>Loading User Data...</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"auth-inner\">\r\n                <h3>Reset Password</h3>\r\n                <Form onSubmit={updatePassword}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"password\"\r\n                        value={password} onChange={(e) => setPassword(e.target.value)}>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"password\" />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"confirmPassword\"\r\n                        value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"confirm password\"\r\n                            style={confirmPassword === password && password ? { borderColor: \"green\" } : { borderColor: \"red\" }} />\r\n                    </Form.Group>\r\n                    <div className=\"d-grid gap-2\">\r\n                        <Button variant=\"outline-primary\" block type=\"submit\" disabled={updated}>Update</Button>\r\n                    </div>\r\n                </Form><br/>\r\n                {updated && (\r\n                    <div>\r\n                        <h5 style={{textAlign:'center'}}>\r\n                            Your password has been successfully reset, please try logging in\r\n                            again.\r\n                        </h5>\r\n                        <Link to=\"/signin\">Sign In</Link>\r\n\r\n                        <Link to=\"/\" style={{float:\"right\"}}>Go Home</Link>\r\n\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","C:\\Users\\User\\volunteers\\src\\components\\login\\forgetPassword.jsx",["167","168"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport './login.css';\r\nimport { CloseButton, Button } from 'react-bootstrap'\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {serverURL} from \"../../config/config\";\r\n\r\nconst ForgetPassword = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [showError, setShowError] = useState(false);\r\n    const [showNullError, setShowNullError] = useState(false);\r\n    const [messageFromServer, setMessageFromServer] = useState(\"\");\r\n    const history = useHistory();\r\n    const SendEmail = async (e) => {\r\n        e.preventDefault();\r\n        if (email === \"\") {\r\n            setShowError(false);\r\n            setMessageFromServer(\"\");\r\n            setShowNullError(true);\r\n            return;\r\n        }\r\n        const result = await axios.get(serverURL + \"forgetPassword\", {\r\n            params: {\r\n                email: email\r\n            }\r\n        });\r\n        if (result.data === \"email not in db\") {\r\n            setShowError(true);\r\n            setMessageFromServer(\"\");\r\n            setShowNullError(false);\r\n        }\r\n        else if (result.data = \"recovery email sent\") {\r\n            setShowError(false);\r\n            setMessageFromServer(\"recovery email sent\");\r\n            setShowNullError(false);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"auth-wrapper\">\r\n            <div className=\"auth-inner\">\r\n                <form onSubmit={SendEmail}>\r\n                    <CloseButton onClick={() => history.push(\"/home\")} />\r\n                    <h3>Reset password</h3>\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control\"\r\n                                onChange={e => setEmail(e.target.value)} value={email} />\r\n                        </div>\r\n                        <br />   <div className=\"d-grid gap-2\">\r\n                            <Button variant=\"outline-primary\" block type=\"submit\">Submit</Button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                {showNullError && (<div><br /><b>The email address cannot be null</b></div>)}\r\n                {showError && <div> <br />\r\n                    <b>The email isn't recognized. Please try again or register for a new account</b>\r\n                    <Link to=\"signup\"></Link>\r\n                </div>}\r\n                {messageFromServer === \"recovery email sent\" && (<div><br />\r\n                    <b>Password reset email successfuly sent</b>\r\n                </div>)}\r\n                {messageFromServer === \"error email sent\" && (<div><br />\r\n                    <b>occours error on email sent</b>\r\n                </div>)}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ForgetPassword;","C:\\Users\\User\\volunteers\\src\\components\\home\\home.jsx",["169","170","171","172","173"],"import React from \"react\";\r\nimport {Carousel } from \"react-bootstrap\";\r\nimport './home.css'\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nexport const Home = () => {\r\n    const [arrayHidden, setArrayHidden] = useState([true, true, true, true, true, true]);\r\n    const [index, setIndex] = useState(0);\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const newArr = arrayHidden;\r\n            newArr[index] = false;\r\n            setArrayHidden(newArr);\r\n            if (index === 5) clearInterval(interval);\r\n            setIndex(index + 1)\r\n        }, 1000);\r\n    }, [index]);\r\n    return (\r\n        <div id=\"container\">\r\n            <Carousel variant=\"dark\">\r\n                <Carousel.Item>\r\n                    <img src= '/asset/img/people-holding-rubber-heart.jpg' />\r\n                </Carousel.Item>\r\n                <Carousel.Item >\r\n                    <img src= '/asset/img/5257.jpg' />\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img src= '/asset/img/child-holding-red-rubber-heart.jpg' />\r\n                </Carousel.Item>\r\n            </Carousel>\r\n            <div id=\"bottomDiv\">\r\n                <ul >\r\n                    <ol style={{ padding: 0 }} > <h2 hidden={arrayHidden[0]}><u>YES , YOU CAN</u></h2></ol>\r\n                    <li hidden={arrayHidden[1]}><h4 >To Give</h4></li>\r\n                    <li hidden={arrayHidden[2]}><h4>To Volunteer</h4></li>\r\n                    <li hidden={arrayHidden[3]}><h4>Create Group Of Volunteers</h4></li>\r\n                </ul>\r\n                <marquee hidden={arrayHidden[4]} behavior=\"scroll\" width=\"100%\" direction=\"left\" height=\"30px\">\r\n                    <h4>everyOne to one    everyOne to one    everyOne to one      everyOne to one </h4>\r\n                </marquee>\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\User\\volunteers\\src\\components\\group\\create_group.jsx",["174","175","176"],"import axios from 'axios';\nimport { useFormik } from 'formik';\nimport React, { useState } from 'react';\nimport { useContext } from 'react';\nimport { Button, CloseButton } from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\nimport { useErrorHandler } from 'react-error-boundary';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { GroupContext, UserContext, userToGroupContext } from '../../App';\nimport {serverURL} from '../../config/config';\nconst CreateGroup = () => {\n    const location = useLocation();\n    const [isCreate, setIsCreate] = useState(false);\n    const { group, setGroup } = useContext(GroupContext);\n    const { userToGroup, setUserToGroup } = useContext(userToGroupContext)\n    const { user, setUser } = useContext(UserContext);\n    const errorHandler = useErrorHandler();\n    const history = useHistory();\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            description: '',\n        },\n        onSubmit: async (values) => {\n            axios.post(serverURL + \"api/Group\", {\n                id_manager: user.id,\n                name: values.name,\n                description: values.description\n            }).then(result => {\n                if (result.data) {\n                    setIsCreate(true);\n                    setGroup(result.data.group);\n                    localStorage.setItem(\"group\", JSON.stringify(result.data.group));\n                    setUserToGroup(result.data);\n                    localStorage.setItem(\"userToGroup\", JSON.stringify(result.data))\n                }\n                else {\n                    alert(\"we dont succed to create group maybe yo have another group with the same name?\");\n                }\n            }).catch(err => errorHandler(err));\n        }\n    });\n    return (<div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n            <CloseButton onClick={() => history.push(\"/home\")} />\n            <h3>Create group</h3>\n            <Form onSubmit={formik.handleSubmit}>\n                <Form.Group>\n                    <Form.Label>Group name</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"enter group name\" id=\"name\" name=\"name\"\n                        onChange={formik.handleChange} value={formik.values.name} disabled={isCreate} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Description on your group</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} id=\"description\" name=\"description\"\n                        onChange={formik.handleChange} value={formik.values.description} disabled={isCreate} />\n                </Form.Group>\n                <Button type=\"submit\" variant=\"primary\" block hidden={isCreate}>Submit</Button>\n            </Form>\n            <Button variant=\"outline-primary\" block hidden={!isCreate}\n                onClick={() => history.push(`/addVolunteers/${group.id}`)}>\n                add volunteers to your group</Button>\n            <Button variant=\"outline-primary\" block hidden={!isCreate} onClick={() => history.push(`/editSchedule/${group.id}`)}>\n                edit schedule to your group</Button>\n        </div></div >\n    )\n}\n\nexport default CreateGroup;\n\n","C:\\Users\\User\\volunteers\\src\\components\\group\\group.jsx",["177","178","179"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { useErrorHandler } from 'react-error-boundary';\nimport { useLocation } from 'react-router-dom';\nimport {serverURL} from '../../config/config';\n\nconst Group = () => {\n        const location = useLocation();\n        const [group, setGroup] = useState(location.state.group);\n        const [events, setEvents] = useState([]);\n        const errorHandler = useErrorHandler()\n        useEffect(async () => {\n                try {\n                        const result = await axios.get(serverURL + \"api/Group\", {\n                                params: {\n                                        id: group.id,\n                                }\n                        });\n                        setGroup(result.data);\n                        setEvents(JSON.parse(result.data.events));\n                } catch (err) {\n                        errorHandler(err);\n                }\n        }, [])\n\n        return <p ></p>\n}\nexport default Group;","C:\\Users\\User\\volunteers\\src\\components\\group\\addVolunteer.jsx",["180","181","182","183","184"],"C:\\Users\\User\\volunteers\\src\\config\\config.js",[],"C:\\Users\\User\\volunteers\\src\\components\\group\\chooseColor.jsx",["185","186"],"import CSS_COLOR_NAMES from '../../config/colors'\r\nimport React, { useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport {serverURL} from '../../config/config'\r\nimport { useEffect, useContext } from 'react';\r\nimport { GroupContext, UserContext } from '../../App.js'\r\nimport { useErrorHandler } from 'react-error-boundary';\r\nconst ChooseColor = (props) => {\r\n    const errorHandler = useErrorHandler();\r\n    const { group } = useContext(GroupContext);\r\n    const { user} = useContext(UserContext);\r\n    const [value, setValue] = useState('');\r\n    const [allGroupUsersColor, setAllGroupUsersColor] = useState([]);\r\n    const handleClose = () => { props.setShow(false); };\r\n    useEffect(async () => {\r\n        try {\r\n            const allUsersColors = await axios.get(serverURL + \"getAllUsersColors\", {\r\n                params: {\r\n                    groupId: props.group.id\r\n                }\r\n            });\r\n            if (allUsersColors.data.length > 0) {\r\n                const colorsWithFilter = CSS_COLOR_NAMES.filter(c => !allUsersColors.data.includes(c));\r\n                setAllGroupUsersColor(colorsWithFilter);\r\n            }\r\n            else {\r\n                setAllGroupUsersColor(CSS_COLOR_NAMES);\r\n            }\r\n        }\r\n        catch (err) {\r\n            errorHandler(err);\r\n        }\r\n    }, []);\r\n    const submit = async () => {\r\n        if (props.color) {\r\n            try {\r\n                const result = await axios.put(serverURL + \"api/usersToGroups\", {\r\n                    user_id: user.id, group_id: props.group.id, color: props.color\r\n                });\r\n                if (result.data) {\r\n                    if (group.id === props.group.id)\r\n                        localStorage.setItem(\"userToGroup\", JSON.stringify(result.data));\r\n                    if (props.setOwnerData)\r\n                        props.setOwnerData([{ Id: user.id, OwnerColor: props.color, OwnerText: user.name }]);\r\n                    else {\r\n                        props.setChangeGroup(!props.changeGroup);\r\n                    }\r\n                    props.setShow(false);\r\n                }\r\n            }\r\n            catch (err) {\r\n                errorHandler(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<Modal show={props.showColorAlert} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>choose color</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>choose color that identify you in the group</Modal.Body>\r\n        <Modal.Footer style={{ justifyContent: \"space-between\" }}>\r\n            <Dropdown onSelect={(e) => props.setColor(e)}>\r\n                <Dropdown.Toggle variant=\"link\" id=\"dropdown-custom-components\" >\r\n                    Choose color\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu >\r\n                    <FormControl\r\n                        autoFocus\r\n                        className=\"mx-3 my-2 w-auto\"\r\n                        placeholder=\"choose color...\"\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                        value={value} />\r\n                    {\r\n                        allGroupUsersColor.length > 0\r\n                            ? allGroupUsersColor.filter(c => c.toLowerCase().startsWith(value)).map((element, index) => <Dropdown.Item eventKey={element} href=\"#\">{element}\r\n                                <div style={{ width: \"3vh\", height: \"3vh\", backgroundColor: element, display: \"inline-block\", float: \"right\" }}></div>\r\n                            </Dropdown.Item>) : \"\"}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <h3 style={{ color: props.color }}>{props.color}</h3>\r\n            <Button variant=\"primary\" onClick={() => submit()} disabled={!props.color}>Submit</Button>\r\n        </Modal.Footer>\r\n    </Modal>);\r\n}\r\nexport default ChooseColor;","C:\\Users\\User\\volunteers\\src\\components\\scheduler\\chooseDate.jsx",["187"],"import React, { useState } from \"react\";\r\nimport { Modal, Form, Button, InputGroup, FormControl } from \"react-bootstrap\";\r\nconst ChooseDate = (props) => {\r\n    \r\n    const [message, setMessage] = useState(\"\")\r\n    const handleClose = () => props.setShowDateAlert(false);\r\n    const submitRangeDates = () => {\r\n        if (props.calendar && props.calendar.eventsData)      {\r\n            let eventsData = props.calendar.eventsData;\r\n            eventsData = eventsData.filter(e => e.StartTime > Date.parse(fromValue) && e.EndTime < Date.parse(toValue));\r\n            if (eventsData && eventsData.length) {\r\n                props.setShowDateAlert(false);\r\n                props.calc(eventsData);\r\n                return;\r\n            }\r\n        }\r\n        setMessage(\"no events to calc\")\r\n\r\n    }\r\n    const getDisplayEvents = () => {\r\n        if (props.calendar && props.calendar.eventsData) {\r\n            let eventsData = props.calendar.getCurrentViewEvents();\r\n            if (eventsData && eventsData.length) {\r\n                props.setShowDateAlert(false)\r\n                props.calc(eventsData);\r\n                return;\r\n            }\r\n        }\r\n        setMessage(\"no events to calc\")\r\n    }\r\n    const [fromValue, setFromValue] = useState(0);\r\n    const [toValue, setToValue] = useState(0);\r\n    return (\r\n        <Modal\r\n            show={props.showDateAlert}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>choose range Date</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Text>From</InputGroup.Text>\r\n                    <FormControl type=\"date\"\r\n                        name=\"duedate\"\r\n                        placeholder=\"Due date\"\r\n                        value={fromValue} max={toValue} onChange={(val) => setFromValue(val.target.value)}\r\n                        aria-label=\"Dollar amount (with dot and two decimal places)\" />\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Text>To</InputGroup.Text>\r\n                    <FormControl type=\"date\"\r\n                        name=\"duedate\"\r\n                        value={toValue} min={fromValue} onChange={(val) => setToValue(val.target.value)}\r\n                        placeholder=\"Due date\" aria-label=\"Dollar amount (with dot and two decimal places)\" />\r\n                </InputGroup>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => handleClose()}>Close </Button>\r\n                <Button disabled={!fromValue || !toValue} onClick={() => submitRangeDates()}>Send</Button>\r\n                <Button variant=\"primary\" onClick={() => getDisplayEvents()}>get display events</Button>\r\n            </Modal.Footer>\r\n        </Modal>)\r\n}\r\nexport default ChooseDate;","C:\\Users\\User\\volunteers\\src\\config\\colors.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":1,"column":74,"nodeType":"194","messageId":"195","endLine":1,"endColumn":80},{"ruleId":"192","severity":1,"message":"196","line":13,"column":3,"nodeType":"194","messageId":"195","endLine":13,"endColumn":7},{"ruleId":"192","severity":1,"message":"197","line":23,"column":8,"nodeType":"194","messageId":"195","endLine":23,"endColumn":14},{"ruleId":"192","severity":1,"message":"198","line":24,"column":22,"nodeType":"194","messageId":"195","endLine":24,"endColumn":33},{"ruleId":"192","severity":1,"message":"199","line":24,"column":45,"nodeType":"194","messageId":"195","endLine":24,"endColumn":49},{"ruleId":"192","severity":1,"message":"200","line":25,"column":10,"nodeType":"194","messageId":"195","endLine":25,"endColumn":32},{"ruleId":"192","severity":1,"message":"201","line":30,"column":7,"nodeType":"194","messageId":"195","endLine":30,"endColumn":19},{"ruleId":"192","severity":1,"message":"202","line":39,"column":10,"nodeType":"194","messageId":"195","endLine":39,"endColumn":18},{"ruleId":"192","severity":1,"message":"203","line":39,"column":20,"nodeType":"194","messageId":"195","endLine":39,"endColumn":31},{"ruleId":"204","severity":1,"message":"205","line":87,"column":97,"nodeType":"206","messageId":"207","endLine":87,"endColumn":99},{"ruleId":"192","severity":1,"message":"208","line":3,"column":29,"nodeType":"194","messageId":"195","endLine":3,"endColumn":40},{"ruleId":"192","severity":1,"message":"209","line":6,"column":10,"nodeType":"194","messageId":"195","endLine":6,"endColumn":21},{"ruleId":"192","severity":1,"message":"210","line":6,"column":43,"nodeType":"194","messageId":"195","endLine":6,"endColumn":55},{"ruleId":"192","severity":1,"message":"211","line":8,"column":26,"nodeType":"194","messageId":"195","endLine":8,"endColumn":40},{"ruleId":"212","severity":1,"message":"213","line":13,"column":17,"nodeType":"214","endLine":13,"endColumn":58},{"ruleId":"192","severity":1,"message":"215","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":18},{"ruleId":"204","severity":1,"message":"205","line":8,"column":45,"nodeType":"206","messageId":"207","endLine":8,"endColumn":47},{"ruleId":"192","severity":1,"message":"193","line":2,"column":27,"nodeType":"194","messageId":"195","endLine":2,"endColumn":33},{"ruleId":"216","severity":1,"message":"217","line":41,"column":8,"nodeType":"218","endLine":41,"endColumn":10,"suggestions":"219"},{"ruleId":"216","severity":1,"message":"220","line":42,"column":15,"nodeType":"221","endLine":56,"endColumn":6},{"ruleId":"216","severity":1,"message":"222","line":56,"column":8,"nodeType":"218","endLine":56,"endColumn":21,"suggestions":"223"},{"ruleId":"192","severity":1,"message":"224","line":64,"column":26,"nodeType":"194","messageId":"195","endLine":64,"endColumn":31},{"ruleId":"204","severity":1,"message":"225","line":195,"column":110,"nodeType":"206","messageId":"207","endLine":195,"endColumn":112},{"ruleId":"192","severity":1,"message":"226","line":3,"column":73,"nodeType":"194","messageId":"195","endLine":3,"endColumn":83},{"ruleId":"216","severity":1,"message":"220","line":32,"column":15,"nodeType":"221","endLine":50,"endColumn":6},{"ruleId":"216","severity":1,"message":"227","line":50,"column":8,"nodeType":"218","endLine":50,"endColumn":15,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":75,"column":27,"nodeType":"194","messageId":"231","endLine":75,"endColumn":32},{"ruleId":"204","severity":1,"message":"205","line":80,"column":43,"nodeType":"206","messageId":"207","endLine":80,"endColumn":45},{"ruleId":"192","severity":1,"message":"232","line":21,"column":65,"nodeType":"194","messageId":"195","endLine":21,"endColumn":79},{"ruleId":"192","severity":1,"message":"233","line":21,"column":81,"nodeType":"194","messageId":"195","endLine":21,"endColumn":94},{"ruleId":"192","severity":1,"message":"234","line":21,"column":135,"nodeType":"194","messageId":"195","endLine":21,"endColumn":144},{"ruleId":"192","severity":1,"message":"235","line":45,"column":18,"nodeType":"194","messageId":"195","endLine":45,"endColumn":26},{"ruleId":"192","severity":1,"message":"236","line":48,"column":10,"nodeType":"194","messageId":"195","endLine":48,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":50,"column":55,"nodeType":"239","messageId":"240","endLine":50,"endColumn":56,"fix":"241"},{"ruleId":"192","severity":1,"message":"242","line":56,"column":10,"nodeType":"194","messageId":"195","endLine":56,"endColumn":25},{"ruleId":"216","severity":1,"message":"220","line":64,"column":13,"nodeType":"221","endLine":79,"endColumn":4},{"ruleId":"216","severity":1,"message":"227","line":79,"column":6,"nodeType":"218","endLine":79,"endColumn":8,"suggestions":"243"},{"ruleId":"204","severity":1,"message":"205","line":133,"column":26,"nodeType":"206","messageId":"207","endLine":133,"endColumn":28},{"ruleId":"192","severity":1,"message":"226","line":4,"column":73,"nodeType":"194","messageId":"195","endLine":4,"endColumn":83},{"ruleId":"216","severity":1,"message":"220","line":35,"column":13,"nodeType":"221","endLine":45,"endColumn":4},{"ruleId":"216","severity":1,"message":"227","line":45,"column":6,"nodeType":"218","endLine":45,"endColumn":8,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"220","line":46,"column":13,"nodeType":"221","endLine":64,"endColumn":4},{"ruleId":"216","severity":1,"message":"245","line":64,"column":6,"nodeType":"218","endLine":64,"endColumn":8,"suggestions":"246"},{"ruleId":"216","severity":1,"message":"247","line":69,"column":6,"nodeType":"218","endLine":69,"endColumn":13,"suggestions":"248"},{"ruleId":"192","severity":1,"message":"249","line":1,"column":41,"nodeType":"194","messageId":"195","endLine":1,"endColumn":50},{"ruleId":"192","severity":1,"message":"250","line":8,"column":29,"nodeType":"194","messageId":"195","endLine":8,"endColumn":40},{"ruleId":"192","severity":1,"message":"193","line":8,"column":53,"nodeType":"194","messageId":"195","endLine":8,"endColumn":59},{"ruleId":"192","severity":1,"message":"251","line":21,"column":13,"nodeType":"194","messageId":"195","endLine":21,"endColumn":24},{"ruleId":"216","severity":1,"message":"220","line":76,"column":15,"nodeType":"221","endLine":92,"endColumn":6},{"ruleId":"216","severity":1,"message":"252","line":92,"column":8,"nodeType":"218","endLine":92,"endColumn":10,"suggestions":"253"},{"ruleId":"192","severity":1,"message":"249","line":12,"column":10,"nodeType":"194","messageId":"195","endLine":12,"endColumn":19},{"ruleId":"192","severity":1,"message":"254","line":21,"column":13,"nodeType":"194","messageId":"195","endLine":21,"endColumn":17},{"ruleId":"192","severity":1,"message":"255","line":22,"column":12,"nodeType":"194","messageId":"195","endLine":22,"endColumn":18},{"ruleId":"192","severity":1,"message":"256","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":17},{"ruleId":"192","severity":1,"message":"257","line":23,"column":11,"nodeType":"194","messageId":"195","endLine":23,"endColumn":19},{"ruleId":"192","severity":1,"message":"258","line":48,"column":11,"nodeType":"194","messageId":"195","endLine":48,"endColumn":23},{"ruleId":"216","severity":1,"message":"220","line":52,"column":15,"nodeType":"221","endLine":73,"endColumn":6},{"ruleId":"216","severity":1,"message":"259","line":73,"column":8,"nodeType":"218","endLine":73,"endColumn":10,"suggestions":"260"},{"ruleId":"192","severity":1,"message":"198","line":5,"column":28,"nodeType":"194","messageId":"195","endLine":5,"endColumn":39},{"ruleId":"261","severity":1,"message":"262","line":33,"column":18,"nodeType":"263","messageId":"264","endLine":33,"endColumn":53},{"ruleId":"216","severity":1,"message":"265","line":17,"column":8,"nodeType":"218","endLine":17,"endColumn":15,"suggestions":"266"},{"ruleId":"212","severity":1,"message":"213","line":22,"column":21,"nodeType":"214","endLine":22,"endColumn":78},{"ruleId":"212","severity":1,"message":"213","line":25,"column":21,"nodeType":"214","endLine":25,"endColumn":55},{"ruleId":"212","severity":1,"message":"213","line":28,"column":21,"nodeType":"214","endLine":28,"endColumn":81},{"ruleId":"267","severity":1,"message":"268","line":38,"column":17,"nodeType":"214","endLine":38,"endColumn":112},{"ruleId":"192","severity":1,"message":"257","line":12,"column":11,"nodeType":"194","messageId":"195","endLine":12,"endColumn":19},{"ruleId":"192","severity":1,"message":"251","line":15,"column":13,"nodeType":"194","messageId":"195","endLine":15,"endColumn":24},{"ruleId":"192","severity":1,"message":"269","line":16,"column":19,"nodeType":"194","messageId":"195","endLine":16,"endColumn":26},{"ruleId":"192","severity":1,"message":"255","line":10,"column":16,"nodeType":"194","messageId":"195","endLine":10,"endColumn":22},{"ruleId":"216","severity":1,"message":"220","line":12,"column":19,"nodeType":"221","endLine":24,"endColumn":10},{"ruleId":"216","severity":1,"message":"270","line":24,"column":12,"nodeType":"218","endLine":24,"endColumn":14,"suggestions":"271"},{"ruleId":"192","severity":1,"message":"272","line":13,"column":37,"nodeType":"194","messageId":"195","endLine":13,"endColumn":55},{"ruleId":"192","severity":1,"message":"273","line":19,"column":24,"nodeType":"194","messageId":"195","endLine":19,"endColumn":37},{"ruleId":"274","severity":1,"message":"275","line":33,"column":33,"nodeType":"221","messageId":"276","endLine":33,"endColumn":35},{"ruleId":"277","severity":1,"message":"278","line":48,"column":57,"nodeType":"214","endLine":48,"endColumn":112},{"ruleId":"277","severity":1,"message":"278","line":49,"column":32,"nodeType":"214","endLine":49,"endColumn":89},{"ruleId":"216","severity":1,"message":"220","line":19,"column":15,"nodeType":"221","endLine":37,"endColumn":6},{"ruleId":"216","severity":1,"message":"279","line":37,"column":8,"nodeType":"218","endLine":37,"endColumn":10,"suggestions":"280"},{"ruleId":"192","severity":1,"message":"281","line":2,"column":17,"nodeType":"194","messageId":"195","endLine":2,"endColumn":21},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Button' is defined but never used.","'useLocation' is defined but never used.","'prot' is defined but never used.","'PortableWifiOffRounded' is defined but never used.","'groupContext' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'setTryAgain' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'NavDropdown' is defined but never used.","'UserContext' is defined but never used.","'GroupContext' is defined but never used.","'setUserToGroup' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formik.values', 'user.email', 'user.name', 'user.password', and 'user.phone'. Either include them or remove the dependency array.","ArrayExpression",["284"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'errorHandler' and 'user.id'. Either include them or remove the dependency array.",["285"],"'value' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'popupClose' is defined but never used.","React Hook useEffect has missing dependencies: 'handleError' and 'id'. Either include them or remove the dependency array.",["286"],"no-use-before-define","'event' was used before it was defined.","usedBeforeDefined","'ViewsDirective' is defined but never used.","'ViewDirective' is defined but never used.","'popupOpen' is defined but never used.","'setGroup' is assigned a value but never used.","'rangeDates' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"287","text":"288"},"'isDisplayEvents' is assigned a value but never used.",["289"],["290"],"React Hook useEffect has missing dependencies: 'group.id', 'handleError', 'setUserToGroup', 'user.id', and 'user.name'. Either include them or remove the dependency array.",["291"],"React Hook useEffect has missing dependencies: 'user.id', 'user.name', and 'userToGroup'. Either include them or remove the dependency array.",["292"],"'useParams' is defined but never used.","'useCallback' is defined but never used.","'userToGroup' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleError', 'location', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["293"],"'user' is assigned a value but never used.","'events' is assigned a value but never used.","'TextField' is defined but never used.","'location' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["294"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","React Hook useEffect has a missing dependency: 'arrayHidden'. Either include it or remove the dependency array.",["295"],"jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","'setUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'errorHandler' and 'group.id'. Either include them or remove the dependency array.",["296"],"'userToGroupContext' is defined but never used.","'setVolunteers' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","React Hook useEffect has missing dependencies: 'errorHandler' and 'props.group.id'. Either include them or remove the dependency array.",["297"],"'Form' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},[2564,2575],"\r\n        .",{"desc":"304","fix":"305"},{"desc":"304","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},"Update the dependencies array to be: [formik.values, user.email, user.name, user.password, user.phone]",{"range":"321","text":"322"},"Update the dependencies array to be: [changeGroup, errorHandler, user.id]",{"range":"323","text":"324"},"Update the dependencies array to be: [group, handleError, id]",{"range":"325","text":"326"},"Update the dependencies array to be: [handleError, id]",{"range":"327","text":"328"},{"range":"329","text":"328"},"Update the dependencies array to be: [group.id, handleError, setUserToGroup, user.id, user.name]",{"range":"330","text":"331"},"Update the dependencies array to be: [color, user.id, user.name, userToGroup]",{"range":"332","text":"333"},"Update the dependencies array to be: [handleError, location, props]",{"range":"334","text":"335"},"Update the dependencies array to be: [token]",{"range":"336","text":"337"},"Update the dependencies array to be: [arrayHidden, index]",{"range":"338","text":"339"},"Update the dependencies array to be: [errorHandler, group.id]",{"range":"340","text":"341"},"Update the dependencies array to be: [errorHandler, props.group.id]",{"range":"342","text":"343"},[1809,1811],"[formik.values, user.email, user.name, user.password, user.phone]",[2231,2244],"[changeGroup, errorHandler, user.id]",[2371,2378],"[group, handleError, id]",[3416,3418],"[handleError, id]",[2218,2220],[2841,2843],"[group.id, handleError, setUserToGroup, user.id, user.name]",[3015,3022],"[color, user.id, user.name, userToGroup]",[3771,3773],"[handleError, location, props]",[2518,2520],"[token]",[625,632],"[arrayHidden, index]",[967,969],"[errorHandler, group.id]",[1506,1508],"[errorHandler, props.group.id]"]