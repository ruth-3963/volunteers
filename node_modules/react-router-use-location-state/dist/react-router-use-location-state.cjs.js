'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var useLocationState$1 = require('use-location-state');
var react = require('react');
var reactRouter = require('react-router');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

if (!reactRouter.__RouterContext)
    throw new Error('missing context export from react-router');
function useRouter() {
    return react.useContext(reactRouter.__RouterContext);
}

function useReactRouterQueryStringInterface() {
    var router = useRouter();
    var history = router && router.history;
    if (!history) {
        console.warn('useRouter - router was not found');
        return;
    }
    return {
        getQueryString: function () { return history.location.search; },
        setQueryString: function (newQueryString, _a) {
            var _b = _a.method, method = _b === void 0 ? 'replace' : _b;
            history[method](history.location.pathname + "?" + newQueryString + history.location.hash);
        },
    };
}

function useQueryState(itemName, defaultValue, queryStateOpts) {
    return useLocationState$1.useQueryState(itemName, defaultValue, __assign({ queryStringInterface: useReactRouterQueryStringInterface() }, queryStateOpts));
}
function useQueryReducer(itemName, reducer, initialState, queryStateOpts) {
    return useLocationState$1.useQueryReducer(itemName, reducer, initialState, __assign({ queryStringInterface: useReactRouterQueryStringInterface() }, queryStateOpts));
}

function useReactRouterLocationStateInterface() {
    var router = useRouter();
    var history = router && router.history;
    if (!history) {
        console.warn('useRouter - router was not found');
        return;
    }
    return {
        getLocationState: function () {
            var historyState = history.location.state;
            return ((historyState && useLocationState$1.LOCATION_STATE_KEY in historyState && historyState[useLocationState$1.LOCATION_STATE_KEY]) ||
                {});
        },
        setLocationState: function (nextState, _a) {
            var _b;
            var _c = _a.method, method = _c === void 0 ? 'replace' : _c;
            var historyState = history.location.state || {};
            var updatedState = __assign(__assign({}, historyState), (_b = {}, _b[useLocationState$1.LOCATION_STATE_KEY] = nextState, _b));
            // create current href, history re-routes incorrectly to "/" for ""
            history[method](history.createHref(history.location), updatedState);
        },
    };
}

function useLocationState(itemName, defaultValue) {
    return useLocationState$1.useLocationState(itemName, defaultValue, {
        locationStateInterface: useReactRouterLocationStateInterface(),
    });
}
function useLocationReducer(itemName, reducer, initialState, locationStateOpts) {
    return useLocationState$1.useLocationReducer(itemName, reducer, initialState, __assign({ locationStateInterface: useReactRouterLocationStateInterface() }, locationStateOpts));
}

exports.useLocationReducer = useLocationReducer;
exports.useLocationState = useLocationState;
exports.useQueryReducer = useQueryReducer;
exports.useQueryState = useQueryState;
